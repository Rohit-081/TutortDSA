Date : 17th March 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:

- Trees
- What (Use Case): DONE
- Why (Applications): DONE
- How (Coding/Implementation): DONE
- Traversals: DONE
- Binary Search Trees: DONE
- Interview Questions on BT and BST: DONE

Trees- Binary Trees

https://leetcode.com/problems/minimum-depth-of-binary-tree/: DONE
https://leetcode.com/problems/maximum-depth-of-n-ary-tree/: DONE
https://leetcode.com/problems/balanced-binary-tree/: 
LC - Premium : https://leetcode.com/problems/binary-tree-upside-down/ 


Trees- Binary Search Trees

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree - IMP
https://leetcode.com/problems/minimum-absolute-difference-in-bst: DONE
https://leetcode.com/problems/search-in-a-binary-search-tree: DONE
https://leetcode.com/problems/range-sum-of-bst: DONE

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".





Q-4: [Adobe] Check if Two Trees are Identical or Not


			1                   |            1
		2      3				|        2        3
				 4  			|                   4


OP:
true



			1                   |            1
		2      3				|        3        2
				 4  			|      4


OP:
false



Edge Cases:

A: Empty
B: Empty


OP:
true



A: Empty
B: Not Empty

OP: 
false



boolean areIdentical(Node root1, Node root2)
{

}




Solution:


(A) Conditions:

- root == same
- Left subtree of first = Left subtree of second
- Right subtree of first = Right subtree of second



(B) CODE:


boolean areIdentical(Node root1, Node root2)
{
	// Both Empty - return true
	if (root1 == null && root2 == null)
		return true;

	// Either One is Empty, Other Not Empty, return false
	if (root1 == null || root2 == null)
		return false;

	// Both Non-Empty, Check for 3 Conditions
	return (root1.data == root2.data) && areIdentical(root1.left, root2.left) && areIdentical(root1.right, root2.right);
}


TC: O(M+N)
SC: O(M+N)




Approach-2: Do Any DFS Traversal and Check if they are SAME

			1                   |            1
		2      3				|        2        3
				 4  			|                   4


OP:
true



InOrder for Tree-1: [2 1 3 4]
InOrder for Tree-2: [2 1 3 4]



TC: O(M+N)
SC: O(M+N) - Recursion: Auxiliary Memory 
	O(M+N) - Array: In Memory



InOrder: In case of Mirror
Left - Root - Right














[IMP]
Q-5: [Adobe] Sum of All Nodes in a Binary Tree


						1
					2      3	
				  4   5	

Sum = 1+2+3+4+5 = 15
OP: 15


int sumOfTree(Node root)
{

}



Solution:

Tree = Root + Left Subtree + Right Subtree


int sumOfTree(Node root)
{
	if (root == null)
		return 0;

	return root.data + sumOfTree(root.left) + sumOfTree(root.right);
}


TC: O(N)
SC: O(N)











Q-6: [Adobe] Variation of Sum of All Left Nodes in a Binary Tree


						1
					2      3	
				  4   5	


Sum = 1 + 2 + 4 = 7
OP: 7


int leftSum(Node root)
{

}



Solution:


int leftSum(Node root)
{
	if (root == null)
		return 0;

	return root.data + leftSum(root.left);
}








Q-7: [Adobe] Variation of Sum of All Right Nodes in a Binary Tree


						1
					2      3	
				  4   5	


Sum = 1 + 3 = 4 
OP: 4


int rightSum(Node root)
{

}



Solution:



int rightSum(Node root)
{
	if (root == null)
		return 0;

	return root.data + rightSum(root.right);
}






TC of leftSum/rightSum of Tree?

Answer: Dependent upon Structure of Tree


(1) Full/Complete Binary Tree


				1
			2       3	
		  4   5   6   7


TC: O(log N)




(2) Skewed Tree


Left Skewed Tree: No Right Children
Right Skewed Tree: No Left Children


Left Skewed Tree:

					1
				2	
			3	
		4	


leftSum = 10
TC: O(N)


rightSum = 1
TC: O(1)








Right Skewed Tree:

					1
						2	
							3	
								4	


rightSum = 10
TC: O(N)


leftSum = 1
TC: O(1)



Final Ans: O(1) - Best Case, O(N) - Worst Case















-----------> BINARY SEARCH TREES (BST)

- Special Kind of Binary Trees


Property:
Left < Root < Right

This Property is followed for ALL Nodes in BST

Note:
Any BST is a BT, Reverse is NOT True



BST: SubSet
BT: SuperSet

No Duplicate in BST:

left < root < right  - All Unique Values


BST: Duplicates NOT Allowed
BT: Duplicates Allowed



						5
					4      6	


BST: 4 < 5 < 6: YES
BT: YES



						1
					2      3	


BST: 2 < 1 < 3: NO
BT: YES




							6
						4        8	
					1     5	   9    7


BST: NO
BT: YES


4 < 6 < 8: YES (Root)
1 < 4 < 5: YES (Left Subtree)
9 < 8 < 7: NO (Right Subtree)













--------> InOrder of BST



							6
						4        8	
					1     5	   7    9



InOrder = [1 4 5 6 7 8 9]

InOrder: left - root - right

BST: left < root < right



Note:

(1) InOrder Traversal of a BST will ALWAYS give a Sorted Array
(2) Left Most Child: SMALLEST
(3) Right Most Child: LARGEST



How to Check if a BT is a BST or Not?
- Best Solution: Do InOrder Traversal, If Sorted -> YES, Else -> NO


TC: O(N)








Interview Questions:

Ques, Company, IP, OP

Function

Code, TC, SC - 30 sec


Structure of Tree:

Node
{
	int data;
	Node left, right;
}












Q-8: [Microsoft] Find Smallest Element in a BST


					20
				8        22	
			  4     12	
			  	  10  14	


OP:
4

int minValue(Node root)
{

}


Solution:

Smallest Element ------> LeftMost Node in the BST


Approach:
Go to leftMost Node and print it





Iterative Version:


int minValue(Node root)
{
	if (root == null)
		return -1;

	Node temp = root; // Dummy Node
	while (temp.left!=null)
	{
		temp = temp.left;
	}

	return temp.data;
}




Recursive Version:

int minValue(Node root)
{
	if (root == null)
		return -1;

	if (root.left == null)
		return root.data;

	return minValue(root.left);
}



TC: O(1) - Best Case , O(N) - Worst Case
SC: O(1) - In Memory, O(N) - Recursion Stack



For BT:
Need to traverse all the Nodes and then check for Minimum.























[Imp]
Q-9: [Adobe] Find All Pairs with Given Sum in a BST


					15
				10        20	
			  8    12	 16  24


target = 28

OP:
[[8,20], [12,16]]



void twoSuminBST(Node root, int target)
{

}




Solution:

InOrder of BST: Sorted Array

"Find Pairs with Given Sum in a Sorted Array"

- Variation of Two Sum (Unsorted Array)



3 Approaches:

(1) Nested Loops: T: O(N^2), S: O(1)
(2) Sorting and Two Pointers: T: O(NlogN), S: O(1)
(3) Hashing: T: O(N), S: O(N)

This Ques: Sorted Array
Best Ans: Second Ans
Two Pointers: Because Its Already Sorted

T: O(N) + O(N) = O(N)
S: O(N) - Store the InOrder Traversal
















[Imp]
Q-10: [Paypal] Find the Kth Smallest (or Largest) Element in a BST



					20
				8        22	
			  4     12	
			  	  10  14	

				
K = 3
OP: 10


K = 5
OP: 14


Constraints: 
1 <= K <= N


public int kthSmallest(TreeNode root, int k)
{

}






[LC-230] Kth Smallest Element in a BST
https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1


Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?


	public int kthSmallest(TreeNode root, int k)
	{

	}




Solution:


(1) Brute Force:

Use Heap (Min-Heap: Kth Min) (Max-Heap: Kth Max) and pop K Times

Space Comlexity will increase due to Heap/Priority Queue


TC: O(NlogN)
SC: O(N)


(2) InOrder Traversal:
 
InOrder Traversal of BST -----> Sorted Array


Store in Array:

Kth Smallest Value = return arr[k-1]
Kth Largest Value = return arr[N-k+1]

T: O(N) - InOrder Traversal
S: O(N) - Storing in Array


N = 10^9
K = 2


InOrder Traversal: 10^9 Iterations
Storage: arr[10**9]




(3) Most Optimised Solution:

Inside InOrder Traversal:

Initialise count = 0

During InOrder Traversal:
	if count == K:
		return root.data


TC: O(K), 1 <= K <= N
SC: O(1)





CODE:

class Solution 
{
    int count = 0;
    int result = -1;

    public int kthSmallest(TreeNode root, int k) 
    {
        traverse(root, k);
        return result;
    }

    public void traverse(TreeNode root, int k)
    {
        if (root == null)
            return;

         // Inorder: left - root - right
        traverse(root.left, k); // recur left subtree
        count++;

        if (count == k)
        {
            result = root.val;
            return;
        }
        
        traverse(root.right, k); // recur right subtree
    }
}


TC: O(K)
SC: O(1)
















