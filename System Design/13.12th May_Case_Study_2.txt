Date : 12th May 2024
Mentor: DEVANG SHARMA
Batch: Mixed Batch (System Design) - Tutort Academy

Agenda: Low Level Design

Low Level Design:

(1) Requirement Gathering: DONE
(2) Laying Down Use Cases: DONE
(3) OOP vs OOD: DONE
- Classes and Objects: DONE
- NVT Technique: DONE
- Case Study: Diagram Using Case Study Technique: DONE
- Class Diagram Using draw.io: DONE
(4) Different Class Relations: DONE
(5) Assigning Responsibilities to Classes: DONE
(6) Relations between Classes: DONE
- HAS-A (Composition vs Aggregation): DONE
- IS-A (Inheritance): DONE
- Relations apart from HAS-A and IS-A (Association): DoNE
(7) UML/Class Diagrams: Types and Purpose: DONE
- Class Diagram: DONE
- Activity Diagram: DONE
- Use Case Diagram: DONE
- Sequence Diagram: DONE
(8) Abstraction vs Encapsulation: DONE
(9) OOD to Model Problem: DONE
(10) Implement Code (Design Patterns + SOLID + KISS + DRY -> Best Practises): DONE

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".










------> CASE STUDIES:


(1) Problem Statement
- Mandatory Requirements
- Optional Requirements

(2) Time: 1.5 Hrs - 2 Hrs

(3) Expectations:
- Use Appropriate Design Patterns
- Use Best Programming Practises (SOLID, KISS, DRY, YAGNI, Scout Principle)

(4) IDE: Your Choice -> Screen Share

(5) Write Code from Scratch

(6) Sample IP and Sample OP

(7) Code: Any Language









LLD:

- Build a Pub-Sub Architecture
- Create a JSON Formatter
(Input: File, Stream)
(Output: Valid JSON)













Case Study - 2: SNAKE AND LADDER GAME



[Problem Statement]:

Create a snake and ladder application. The application should take as input (from the command line or a file):

- Number of snakes (s) followed by s lines each containing 2 numbers denoting the head and tail positions of the snake.
- Number of ladders (l) followed by l lines each containing 2 numbers denoting the start and end positions of the ladder.
- Number of players (p) followed by p lines each containing a name.
- After taking these inputs, you should print all the moves in the form of the current player name followed by a random number between 1 to 6 denoting the die roll and the initial and final position based on the move.
Format: <player_name> rolled a <dice_value> and moved from <initial_position> to <final_position>

When someone wins the game, print that the player won the game.
Format: <player_name> wins the game



[Rules of the game]:

- The board will have 100 cells numbered from 1 to 100 (Square: 10x10)
- The game will have a six sided dice numbered from 1 to 6 and will always give a random number on rolling it.
- Each player has a piece which is initially kept outside the board (i.e., at position 0).
- Each player rolls the dice when their turn comes.
- Based on the dice value, the player moves their piece forward that number of cells. Ex: If the dice value is 5 and the piece is at position 21, the player will put their piece at position 26 now (21+5).
- A player wins if it exactly reaches the position 100 and the game ends there.
- After the dice roll, if a piece is supposed to move outside position 100, it does not move.
- The board also contains some snakes and ladders.
- Each snake will have its head at some larger number and its tail at a smaller number.
- Whenever a piece ends up at a position with the head of the snake, the piece should go down to the position of the tail of that snake.
- Each ladder will have its start position at some smaller number and end position at a larger number.
- Whenever a piece ends up at a position with the start of the ladder, the piece should go up to the position of the end of that ladder.
- There could be another snake/ladder at the tail of the snake or the end position of the ladder and the piece should go up/down accordingly.
  (Snake Tail + Ladder Start/End: Okay)
  (Snake Head + Ladder Start: Not Okay)


Assumptions you can take apart from those already mentioned in rules:
- There won’t be a snake at 100.
- There won’t be multiple snakes/ladders at the same start/head point.
- It is possible to reach 100, i.e., it is possible to win the game.
- Snakes and Ladders do not form an infinite loop.


[Sample Input]:

9 - SNAKES
62 5
33 6
49 9
88 16
41 20
56 53
98 64
93 73
95 75
8 - LADDERS
2 37
27 46
10 32
51 68
61 79
65 84
71 91
81 100
2
Chanchal
Devang


[Sample Output]:

Chanchal rolled a 6 and moved from 0 to 6
Devang rolled a 1 and moved from 0 to 1
Chanchal rolled a 6 and moved from 6 to 12
Devang rolled a 4 and moved from 1 to 5
Chanchal rolled a 4 and moved from 12 to 16
Devang rolled a 6 and moved from 5 to 11
Chanchal rolled a 5 and moved from 16 to 21
Devang rolled a 4 and moved from 11 to 15
Chanchal rolled a 1 and moved from 21 to 22
Devang rolled a 6 and moved from 15 to 21
Chanchal rolled a 6 and moved from 22 to 28
Devang rolled a 2 and moved from 21 to 23
Chanchal rolled a 6 and moved from 28 to 34
Devang rolled a 6 and moved from 23 to 29
Chanchal rolled a 5 and moved from 34 to 39
Devang rolled a 2 and moved from 29 to 31
Chanchal rolled a 2 and moved from 39 to 20
Devang rolled a 5 and moved from 31 to 36
Chanchal rolled a 3 and moved from 20 to 23
Devang rolled a 5 and moved from 36 to 20
Chanchal rolled a 6 and moved from 23 to 29
Devang rolled a 3 and moved from 20 to 23
Chanchal rolled a 2 and moved from 29 to 31
Devang rolled a 3 and moved from 23 to 26
Chanchal rolled a 3 and moved from 31 to 34
Devang rolled a 5 and moved from 26 to 31
Chanchal rolled a 3 and moved from 34 to 37
Devang rolled a 4 and moved from 31 to 35
Chanchal rolled a 2 and moved from 37 to 39
Devang rolled a 5 and moved from 35 to 40
Chanchal rolled a 2 and moved from 39 to 20
Devang rolled a 5 and moved from 40 to 45
Chanchal rolled a 2 and moved from 20 to 22
Devang rolled a 6 and moved from 45 to 68
Chanchal rolled a 3 and moved from 22 to 25
Devang rolled a 3 and moved from 68 to 91
Chanchal rolled a 5 and moved from 25 to 30
Devang rolled a 2 and moved from 91 to 73
Chanchal rolled a 5 and moved from 30 to 35
Devang rolled a 6 and moved from 73 to 79
Chanchal rolled a 5 and moved from 35 to 40
Devang rolled a 1 and moved from 79 to 80
Chanchal rolled a 4 and moved from 40 to 44
Devang rolled a 2 and moved from 80 to 82
Chanchal rolled a 5 and moved from 44 to 9
Devang rolled a 4 and moved from 82 to 86
Chanchal rolled a 1 and moved from 9 to 32
Devang rolled a 6 and moved from 86 to 92
Chanchal rolled a 3 and moved from 32 to 35
Devang rolled a 4 and moved from 92 to 96
Chanchal rolled a 1 and moved from 35 to 36
Devang rolled a 1 and moved from 96 to 97
Chanchal rolled a 1 and moved from 36 to 37
Devang rolled a 5 and moved from 97 to 97
Chanchal rolled a 6 and moved from 36 to 42
Devang rolled a 3 and moved from 97 to 100
Devang wins the game





[Expectations]:

- Make sure that you have a working and demonstrable code 
- Make sure that the code is functionally correct 
- Code should be modular and readable 
- Separation of concern should be addressed 
- Please do not write everything in a single file 
- Code should easily accommodate new requirements and minimal changes 
- There should be a main method from where the code could be easily testable


[Optional]:
Write unit tests, if possible
No need to create a GUI



[Optional Requirements]:

Please do these only if you’ve time left. You can write your code such that these could be accommodated without changing your code much.

- The game is played with two dice instead of 1 and so the total dice value could be between 2 and 12 in a single move. 
- The board size can be customizable and can be taken as input before other input (snakes, ladders, players). 
- In case of more than 2 players, the game continues until only one player is left. 
- On getting a 6, you get another turn and on getting 3 consecutive 6s, all the three of those get cancelled. 
- Game starts only after getting a 1 or a 6
- On starting the application, the snakes and ladders should be created programmatically without any user input, keeping in mind the constraints mentioned in rules.

[Setup process]:
Please go through the setup process here.

[Submission]:
Try to solve it within 1.5 hours.
Please go through the submission process here.
















---------> Solutions:



General Syntax:

- Util
	- Constants
	- Configs

- Validators
	- validatorService (Validator)

- Controller
	- RestController (Orchestration)

- Impl
	- serviceImpl (Service/ Implementation)



Expectations:

(1) Classes
(2) Models
(3) Services
(4) Driver Class (Interact to Client)
(5) Adapter/Logic
(6) Validations
(7) ENUMS
(8) Orchestration/ Controller



Ans:


(1) Classes
- Snakes
- Ladders
- Board
- Player
- Dice


(2) Models/Entities -> Main Actors of System
- Snake
- Ladder
- Player
- BoardGame


(3) Services
- SnakeAndLadderService 
(Movement following the rules)

(4) Driver Class (Interact to Client)
- Main.java/ Driver.java

(5) Adapter/Logic
- SnakeAndLadderService

(6) Validations
- Each player has a piece which is initially kept outside the board (i.e., at position 0).
- A player wins if it exactly reaches the position 100 and the game ends there.
- After the dice roll, if a piece is supposed to move outside position 100, it does not move.
- Whenever a piece ends up at a position with the head of the snake, the piece should go down to the position of the tail of that snake.
- Whenever a piece ends up at a position with the start of the ladder, the piece should go up to the position of the end of that ladder.


Optional Validation
- Each snake will have its head at some larger number and its tail at a smaller number.
- Each ladder will have its start position at some smaller number and end position at a larger number.
- There could be another snake/ladder at the tail of the snake or the end position of the ladder and the piece should go up/down accordingly.
  (Snake Tail + Ladder Start/End: Okay)
  (Snake Head + Ladder Start: Not Okay)


(7) ENUMS
- None


(8) Orchestration/ Controller
- SnakeAndLadderController










Workflow/Reasoning:

(1) Start with Entities/Models
(2) Write Services which interacts with theses Models and among themselves
(3) Write Logic for Driver Class



Main ----> SnakeAndLadderController -----> SnakeAndLadderService ----> Snakes ----> Ladders
			
			Controller                       Impl                      Entities
			Orchestration		







Main/Driver Class:
- To Take Input from the User


Clean and Modular Design



Optional Requirements:

With minimal code changes, I should be able to accommodate these requirements:


(1) The game is played with two dice instead of 1 and so the total dice value could be between 2 and 12 in a single move. 

Purpose: Random Number from 1 to 6

Modify: Random Number from 2 to 12: DONE


(2) The board size can be customizable and can be taken as input before other input (snakes, ladders, players). 

- String size: Board Class



(3) In case of more than 2 players, the game continues until only one player is left. 

boolean isContinueGame()
{
	if cur_player > 1
		continue;
	else
		exit();

}


- Service Level: SnakeAndLadderService


(4) On getting a 6, you get another turn and on getting 3 consecutive 6s, all the three of those get cancelled. 


For 6 use case:
- Need to store the previous and next move.


- Validation: SnakeAndLadderService



(5) Game starts only after getting a 1 or a 6

- Start Only with 1 or 6

- Validation: SnakeAndLadderService


(6) On starting the application, the snakes and ladders should be created programmatically without any user input, keeping in mind the constraints mentioned in rules.

- Without User Input: Logic in Constructor 

- Board Class









------> Entities/Models

- Player
- Snake
- Ladder
- SnakeAndLadderBoard

-----> Services

- SnakeAndLadderService
- DiceService

-----> Driver

- User Input (File/ Command Line Arguments)









SOLUTION DEMO:


IP:

9
62 5
33 6
49 9
88 16
41 20
56 53
98 64
93 73
95 75
8
2 37
27 46
10 32
51 68
61 79
65 84
71 91
81 100
2
Devang
Chanchal


OP:

Devang rolled a 5 and moved from 0 to 5
Chanchal rolled a 1 and moved from 0 to 1
Devang rolled a 5 and moved from 5 to 32
Chanchal rolled a 2 and moved from 1 to 3
Devang rolled a 2 and moved from 32 to 34
Chanchal rolled a 5 and moved from 3 to 8
Devang rolled a 2 and moved from 34 to 36
Chanchal rolled a 2 and moved from 8 to 32
Devang rolled a 6 and moved from 36 to 42
Chanchal rolled a 4 and moved from 32 to 36
Devang rolled a 3 and moved from 42 to 45
Chanchal rolled a 3 and moved from 36 to 39
Devang rolled a 4 and moved from 45 to 9
Chanchal rolled a 6 and moved from 39 to 45
Devang rolled a 3 and moved from 9 to 12
Chanchal rolled a 2 and moved from 45 to 47
Devang rolled a 2 and moved from 12 to 14
Chanchal rolled a 4 and moved from 47 to 68
Devang rolled a 3 and moved from 14 to 17
Chanchal rolled a 5 and moved from 68 to 73
Devang rolled a 2 and moved from 17 to 19
Chanchal rolled a 6 and moved from 73 to 79
Devang rolled a 5 and moved from 19 to 24
Chanchal rolled a 2 and moved from 79 to 100
Chanchal wins the game






CODE:


DONE














HW:

- Design a Chess Board
(Multiplayer)



Next Case Study:
- PARKING LOT












