Date : 18th May 2024
Mentor: DEVANG SHARMA
Batch: Mixed Batch (System Design) - Tutort Academy

Agenda: Low Level Design

Low Level Design:

(1) Requirement Gathering: DONE
(2) Laying Down Use Cases: DONE
(3) OOP vs OOD: DONE
- Classes and Objects: DONE
- NVT Technique: DONE
- Case Study: Diagram Using Case Study Technique: DONE
- Class Diagram Using draw.io: DONE
(4) Different Class Relations: DONE
(5) Assigning Responsibilities to Classes: DONE
(6) Relations between Classes: DONE
- HAS-A (Composition vs Aggregation): DONE
- IS-A (Inheritance): DONE
- Relations apart from HAS-A and IS-A (Association): DONE
(7) UML/Class Diagrams: Types and Purpose: DONE
- Class Diagram: DONE
- Activity Diagram: DONE
- Use Case Diagram: DONE
- Sequence Diagram: DONE
(8) Abstraction vs Encapsulation: DONE
(9) OOD to Model Problem: DONE
(10) Implement Code (Design Patterns + SOLID + KISS + DRY -> Best Practises): DONE

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".



------> CASE STUDIES:


(1) Problem Statement
- Mandatory Requirements
- Optional Requirements

(2) Time: 1.5 Hrs - 2 Hrs

(3) Expectations:
- Use Appropriate Design Patterns
- Use Best Programming Practises (SOLID, KISS, DRY, YAGNI, Scout Principle)

(4) IDE: Your Choice -> Screen Share

(5) Write Code from Scratch

(6) Sample IP and Sample OP

(7) Code: Any Language







Case Study - 3: PARKING LOT


[Problem Statement]:

A parking lot is an area where cars can be parked for a certain amount of time.
A parking lot can have multiple floors with each floor having a different number of slots and each slot being suitable for different types of vehicles.
For this problem, we have to design the next generation parking lot system which can manage a parking lot without any human intervention.


[Requirements]:

Create a command-line application for the parking lot system with the following requirements.

The functions that the parking lot system can do:
* Create the parking lot.
* Add floors to the parking lot.
* Add a parking lot slot to any of the floors.
* Given a vehicle, it finds the first available slot, books it, creates a ticket, parks the vehicle, and finally returns the ticket.
* Unparks a vehicle given the ticket id.
* Displays the number of free slots per floor for a specific vehicle type.
* Displays all the free slots per floor for a specific vehicle type.
* Displays all the occupied slots per floor for a specific vehicle type.

Details about the Vehicles:
* Every vehicle will have a type, registration number, and color.

Different Types of Vehicles:
* Car
* Bike
* Truck



Details about the Parking Slots:
* Each type of slot can park a specific type of vehicle.
* No other vehicle should be allowed by the system.
* Finding the first available slot should be based on:
* The slot should be of the same type as the vehicle.
* The slot should be on the lowest possible floor in the parking lot.
* The slot should have the lowest possible slot number on the floor.
* Numbered serially from 1 to n for each floor where n is the number of parking slots on that floor.

Details about the Parking Lot Floors:
* Numbered serially from 1 to n where n is the number of floors.
* Might contain one or more parking lot slots of different types.
* We will assume that the first slot on each floor will be for a truck, the next 2 for bikes, and all the other slots for cars.

(Max Trucks in 1 Floor: 1)
(Max Bikes in 1 Floor: 2)
(Max Cars in 1 Floor: N-3) (N: Total Number of Slots in that floor)


Details about the Tickets:
The ticket id would be of the following format:
<parking_lot_id>_<floor_no>_<slot_no>

Example: PR1234_2_5 (denotes 5th slot of 2nd floor of parking lot PR1234)
We can assume that there will only be 1 parking lot. The ID of that parking lot is PR1234.




[Input/Output Format]
The code should strictly follow the input/output format and will be tested with provided test cases.

[Input Format]
Multiple lines with each line containing a command.

[Possible commands:]

create_parking_lot <parking_lot_id> <no_of_floors> <no_of_slots_per_floor>
park_vehicle <vehicle_type> <reg_no> <color>
unpark_vehicle <ticket_id>
display <display_type> <vehicle_type>
Possible values of display_type: free_count, free_slots, occupied_slots
exit
Stop taking the input when you encounter the word exit.

[Output Format]
Print output based on the specific commands as mentioned below.

create_parking_lot
Created parking lot with <no_of_floors> floors and <no_of_slots_per_floor> slots per floor

park_vehicle
Parked vehicle. Ticket ID: <ticket_id>
Print "Parking Lot Full" if slot is not available for that vehicle type.

unpark_vehicle
Unparked vehicle with Registration Number: <reg_no> and Color: <color>
Print "Invalid Ticket" if ticket is invalid or parking slot is not occupied.

display free_count <vehicle_type>
No. of free slots for <vehicle_type> on Floor <floor_no>: <no_of_free_slots>
The above will be printed for each floor.

display free_slots <vehicle_type>
Free slots for <vehicle_type> on Floor <floor_no>: <comma_separated_values_of_slot_nos>
The above will be printed for each floor.

display occupied_slots <vehicle_type>
Occupied slots for <vehicle_type> on Floor <floor_no>: <comma_separated_values_of_slot_nos>
The above will be printed for each floor.






[Examples]

[Sample Input]

* We will assume that the first slot on each floor will be for a truck, the next 2 for bikes, and all the other slots for cars.


(1) create_parking_lot PR1234 2 6

Create parking Lot with 2 floors and 6 slots per floor

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     1      2     3    4      5    6


Floor-2:     1      2     3    4      5    6




(2) display free_count CAR

No. of free slots for CAR on Floor 1: 3
No. of free slots for CAR on Floor 2: 3


(3) display free_count BIKE

No. of free slots for BIKE on Floor 1: 2
No. of free slots for BIKE on Floor 2: 2


(4) display free_count TRUCK

No. of free slots for TRUCK on Floor 1: 1
No. of free slots for TRUCK on Floor 2: 1



(5) display free_slots CAR

Free slots for CAR on Floor 1: 4,5,6
Free slots for CAR on Floor 2: 4,5,6


(6) display free_slots BIKE

Free slots for BIKE on Floor 1: 2,3
Free slots for BIKE on Floor 2: 2,3


(7) display free_slots TRUCK

Free slots for TRUCK on Floor 1: 1
Free slots for TRUCK on Floor 2: 1


(8) display occupied_slots CAR

Occupied slots for CAR on Floor 1:
Occupied slots for CAR on Floor 2:


(9) display occupied_slots BIKE

Occupied slots for BIKE on Floor 1:
Occupied slots for BIKE on Floor 2:


(10) display occupied_slots TRUCK

Occupied slots for TRUCK on Floor 1:
Occupied slots for TRUCK on Floor 2:


(11) park_vehicle CAR KA-01-DB-1234 black - C1

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1     _     _


Floor-2:     _     _      _     _     _     _


Floor-1, Slot-4: Parked

OP:

Parked vehicle. Ticket ID: PR1234_1_4



(12) park_vehicle CAR KA-02-CB-1334 red - C2

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2     _


Floor-2:     _     _      _     _     _     _


Floor-1, Slot-5: Parked

OP:

Parked vehicle. Ticket ID: PR1234_1_5



(13) park_vehicle CAR KA-01-DB-1133 black - C3

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     _     _     _


Floor-1, Slot-6: Parked

OP:

Parked vehicle. Ticket ID: PR1234_1_6



(14) park_vehicle CAR KA-05-HJ-8432 white - C4

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4    _     _


Floor-2, Slot-4: Parked

OP:

Parked vehicle. Ticket ID: PR1234_2_4




(15) park_vehicle CAR WB-45-HO-9032 white - C5


PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4    C5   _


Floor-2, Slot-5: Parked

OP:

Parked vehicle. Ticket ID: PR1234_2_5






(16) park_vehicle CAR KA-01-DF-8230 black - C6

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4    C5   C6


Floor-2, Slot-6: Parked

OP:

Parked vehicle. Ticket ID: PR1234_2_6



(17) park_vehicle CAR KA-21-HS-2347 red - C7 - No Slot available

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4   C5   C6


OP:
Parking Lot Full


(18) display free_count CAR

No. of free slots for CAR on Floor 1: 0
No. of free slots for CAR on Floor 2: 0



(19) display free_count BIKE

No. of free slots for BIKE on Floor 1: 2
No. of free slots for BIKE on Floor 2: 2



(20) display free_count TRUCK

No. of free slots for TRUCK on Floor 1: 1
No. of free slots for TRUCK on Floor 2: 1



(21) unpark_vehicle PR1234_2_5

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4   _     C6


OP:
Unparked vehicle with Registration Number: WB-45-HO-9032 and Color: white





(22) unpark_vehicle PR1234_2_5


PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4   _     C6


OP:
Invalid Ticket


(23) unpark_vehicle PR1234_2_7

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4   _     C6

OP:
Invalid Ticket


(24) display free_count CAR

No. of free slots for CAR on Floor 1: 0
No. of free slots for CAR on Floor 2: 1



(25) display free_count BIKE

No. of free slots for BIKE on Floor 1: 2
No. of free slots for BIKE on Floor 2: 2

(26) display free_count TRUCK

No. of free slots for TRUCK on Floor 1: 1
No. of free slots for TRUCK on Floor 2: 1


(27) display free_slots CAR

Free slots for CAR on Floor 1: 
Free slots for CAR on Floor 2: 5


(28) display free_slots BIKE

Free slots for BIKE on Floor 1: 2,3
Free slots for BIKE on Floor 2: 2,3


(29) display free_slots TRUCK

Free slots for TRUCK on Floor 1: 1
Free slots for TRUCK on Floor 2: 1



PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     _      _     C1   C2    C3


Floor-2:     _     _      _     C4   _     C6


(30) display occupied_slots CAR

Occupied slots for CAR on Floor 1: 4,5,6
Occupied slots for CAR on Floor 2: 4,6



(31) display occupied_slots BIKE

Occupied slots for BIKE on Floor 1: 
Occupied slots for BIKE on Floor 2: 


(32) display occupied_slots TRUCK

Occupied slots for TRUCK on Floor 1: 
Occupied slots for TRUCK on Floor 2: 


(33) park_vehicle BIKE KA-01-DB-1541 black - B1


PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     _     B1     _     C1   C2    C3


Floor-2:     _     _      _     C4   _     C6


Floor-1, Slot-2: Parked

OP:

Parked vehicle. Ticket ID: PR1234_1_2


(34) park_vehicle TRUCK KA-32-SJ-5389 orange - T1

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     T1    B1     _     C1   C2    C3


Floor-2:     _     _      _     C4   _     C6


Floor-1, Slot-1: Parked

OP:

Parked vehicle. Ticket ID: PR1234_1_1


(35) park_vehicle TRUCK KL-54-DN-4582 green - T2

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     T1    B1     _     C1   C2    C3


Floor-2:     T2     _      _     C4   _    C6


Floor-2, Slot-1: Parked

OP:

Parked vehicle. Ticket ID: PR1234_2_1



(36) park_vehicle TRUCK KL-12-HF-4542 green - T3

PR1234

            Truck  Bike  Bike  Car   Car   Car

Floor-1:     T1    B1     _     C1   C2    C3


Floor-2:     T2     _      _     C4   _    C6


OP:

Parking Lot Full


(37) display free_count CAR

No. of free slots for CAR on Floor 1: 0
No. of free slots for CAR on Floor 2: 1

(38) display free_count BIKE

No. of free slots for BIKE on Floor 1: 1
No. of free slots for BIKE on Floor 2: 2


(39) display free_count TRUCK

No. of free slots for TRUCK on Floor 1: 0
No. of free slots for TRUCK on Floor 2: 0


(40) display free_slots CAR

Free slots for CAR on Floor 1: 
Free slots for CAR on Floor 2: 5


(41) display free_slots BIKE

Free slots for BIKE on Floor 1: 3
Free slots for BIKE on Floor 2: 2,3


(42) display free_slots TRUCK

Free slots for TRUCK on Floor 1: 
Free slots for TRUCK on Floor 2: 


(43) display occupied_slots CAR

Occupied slots for CAR on Floor 1: 4,5,6
Occupied slots for CAR on Floor 2: 4,6


(44) display occupied_slots BIKE

Occupied slots for BIKE on Floor 1: 2
Occupied slots for BIKE on Floor 2: 


(45) display occupied_slots TRUCK

Occupied slots for TRUCK on Floor 1: 1
Occupied slots for TRUCK on Floor 2: 1

(46) exit

- Stop the Program


[Expected Output]

Created parking lot with 2 floors and 6 slots per floor
No. of free slots for CAR on Floor 1: 3
No. of free slots for CAR on Floor 2: 3
No. of free slots for BIKE on Floor 1: 2
No. of free slots for BIKE on Floor 2: 2
No. of free slots for TRUCK on Floor 1: 1
No. of free slots for TRUCK on Floor 2: 1
Free slots for CAR on Floor 1: 4,5,6
Free slots for CAR on Floor 2: 4,5,6
Free slots for BIKE on Floor 1: 2,3
Free slots for BIKE on Floor 2: 2,3
Free slots for TRUCK on Floor 1: 1
Free slots for TRUCK on Floor 2: 1
Occupied slots for CAR on Floor 1:
Occupied slots for CAR on Floor 2:
Occupied slots for BIKE on Floor 1:
Occupied slots for BIKE on Floor 2:
Occupied slots for TRUCK on Floor 1:
Occupied slots for TRUCK on Floor 2:
Parked vehicle. Ticket ID: PR1234_1_4
Parked vehicle. Ticket ID: PR1234_1_5
Parked vehicle. Ticket ID: PR1234_1_6
Parked vehicle. Ticket ID: PR1234_2_4
Parked vehicle. Ticket ID: PR1234_2_5
Parked vehicle. Ticket ID: PR1234_2_6
Parking Lot Full
No. of free slots for CAR on Floor 1: 0
No. of free slots for CAR on Floor 2: 0
No. of free slots for BIKE on Floor 1: 2
No. of free slots for BIKE on Floor 2: 2
No. of free slots for TRUCK on Floor 1: 1
No. of free slots for TRUCK on Floor 2: 1
Unparked vehicle with Registration Number: WB-45-HO-9032 and Color: white
Invalid Ticket
Invalid Ticket
No. of free slots for CAR on Floor 1: 0
No. of free slots for CAR on Floor 2: 1
No. of free slots for BIKE on Floor 1: 2
No. of free slots for BIKE on Floor 2: 2
No. of free slots for TRUCK on Floor 1: 1
No. of free slots for TRUCK on Floor 2: 1
Free slots for CAR on Floor 1:
Free slots for CAR on Floor 2: 5
Free slots for BIKE on Floor 1: 2,3
Free slots for BIKE on Floor 2: 2,3
Free slots for TRUCK on Floor 1: 1
Free slots for TRUCK on Floor 2: 1
Occupied slots for CAR on Floor 1: 4,5,6
Occupied slots for CAR on Floor 2: 4,6
Occupied slots for BIKE on Floor 1:
Occupied slots for BIKE on Floor 2:
Occupied slots for TRUCK on Floor 1:
Occupied slots for TRUCK on Floor 2:
Parked vehicle. Ticket ID: PR1234_1_2
Parked vehicle. Ticket ID: PR1234_1_1
Parked vehicle. Ticket ID: PR1234_2_1
Parking Lot Full
No. of free slots for CAR on Floor 1: 0
No. of free slots for CAR on Floor 2: 1
No. of free slots for BIKE on Floor 1: 1
No. of free slots for BIKE on Floor 2: 2
No. of free slots for TRUCK on Floor 1: 0
No. of free slots for TRUCK on Floor 2: 0
Free slots for CAR on Floor 1:
Free slots for CAR on Floor 2: 5
Free slots for BIKE on Floor 1: 3
Free slots for BIKE on Floor 2: 2,3
Free slots for TRUCK on Floor 1:
Free slots for TRUCK on Floor 2:
Occupied slots for CAR on Floor 1: 4,5,6
Occupied slots for CAR on Floor 2: 4,6
Occupied slots for BIKE on Floor 1: 2
Occupied slots for BIKE on Floor 2:
Occupied slots for TRUCK on Floor 1: 1
Occupied slots for TRUCK on Floor 2: 1


[Expectations]

* Make sure that you have a working and demonstrable code
* Make sure that the code is functionally correct
* Code should be modular and readable
* Separation of concern should be addressed
* Please do not write everything in a single file (if not coding in C/C++)
* Code should easily accommodate new requirements and minimal changes
* There should be a main method from where the code could be easily testable


[Optional] 
Write unit tests, if possible
No need to create a GUI

[Optional Requirements]
Please do these only if you’ve time left. You can write your code such that these could be accommodated without changing your code much.

* Keep the code extensible to add additional types of vehicles and slot types.
* Keep the code extensible to allow a different strategy of finding the first available slot.
* Keep the code extensible to allow any other type of command.
* Keep the code extensible to allow multiple parking lots. You can assume that the input/output format can be changed for that.
* Keep the system thread-safe to allow concurrent requests.


Explanation:
* Keep the system thread-safe to allow "concurrent requests".




Movie Ticket:

K12, K13: Grey - Not available to book

After 10 Mins, If Payment is not received, Unmark It/ Free It

K12, K13: Green - available to book



Floor-2, Slot-5:

User-1: CAR: 10:10:15
User-2: CAR: 10:10:15










---------> Solutions:



General Syntax:

- Util
	- Constants
	- Configs

- Validators
	- validatorService (Validator)

- Controller
	- RestController (Orchestration)

- Impl
	- serviceImpl (Service/ Implementation)



Expectations:

(1) Classes
(2) Models
(3) Services
(4) Driver Class (Interact to Client)
(5) Adapter/Logic
(6) Validations
(7) ENUMS
(8) Orchestration/ Controller





Ans:


(1) Classes
- ParkingLot (ID, Floors, Spots)
- Floor (ID, List of Slots)
- Slot (ID)
- DisplayCommand
- Vehicle (ID, Color, Reg No)
- VehicleType


Parking Lot = List<Floors>
Floor = List<Slots>
Slot = ID based upon Vehicles


(2) Models/Entities -> Main Actors of System

- ParkingLot (ID, Floors, Spots)
- Floor (ID, List of Slots)
- Slot (ID)
- DisplayCommand
- Vehicle (ID, Color, Reg No)


(3) Services
- ParkingLotService (Impl)


(4) Driver Class (Interact to Client)
- Main.java/ Driver.java


(5) Adapter/Logic
- ParkingLotService (Impl)


(6) Validations
- For Each Floor: 1st Truck, Next 2 - Bikes, Rest All - Cars
- First Come First Serve logic

Optional Validation


(7) ENUMS
- VehicleType (CAR, BIKE, TRUCK)


(8) Orchestration/ Controller
- ParkingLotConroller/ ParkingLotRepository




General Flow:

(1) Start with Entities/Models
(2) Write Services which interacts with theses Models and among themselves
(3) Write Logic for Driver Class






Workflow/Reasoning:

(1) We need to create a Multi-Level Parking Lot System
(2) There will be multiple vehicles
(3) There will be multiple floors
(4) There will be multiple slots per vehicle in each floor
(5) We will assume that the first slot on each floor will be for a truck, the next 2 for bikes, and all the other slots for cars.


Each Floor: Truck Bike Bike Car............Car





Main/Driver ----> ParkingLotRepository -----> ParkingLotService ---->  Parking Lot / Vehicles
			
			        Controller                       Impl                      Entities
			       Orchestration		







Main/Driver Class:
- To Take Input from the User


Clean and Modular Design



Optional Requirements:

With minimal code changes, I should be able to accommodate these requirements:



(1) Keep the code extensible to add additional types of vehicles and slot types.
- Class: Vehicle , Add More Attributes
- Class: ParkingSlot , Add More Attributes


(2) Keep the code extensible to allow a different strategy of finding the first available slot.
- Logic in Service Layer

(3) Keep the code extensible to allow any other type of command.
- Command Class


(4) Keep the code extensible to allow multiple parking lots. You can assume that the input/output format can be changed for that.
- Wrapper

ParkingLot Class - Create Multiple Objects


(5) Keep the system thread-safe to allow concurrent requests.
- Use synchronised and volatile keyword







------> Entities/Models

- ParkingLot (ID, Floors, Spots)
- Floor (ID, List of Slots)
- Slot (ID)
- DisplayCommand
- Vehicle (ID, Color, Reg No)

-----> Services

- ParkingLotService
(Logic for lowest floor, lowest slot available will reside here)

-----> Driver

- User Input (File/ Command Line Arguments)









SOLUTION DEMO:

DONE












Tomorrow:

- Class:

- Design Patterns
- Pub Sub
- Case Study
- Elevator LLD
- Coffee Machines
































