Date : 14th Jan 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:

(1) Introduction to Linked List- DONE
(2) Linked List vs Array - DONE
(3) Linked List Insertion - DONE

(4) TRAVERSAL: Printing Linked List - DONE
(5) Calculate Length -- Iterative - DONE
(6) Calculate Length -- Recursive - HW() - DONE
(7) Search in a Linked List -- Iterative, Recursive --DONE
(8) Delete a Linked List - DONE
(9) Nth Node in a Linked List -- DONE

VVI(10) Nth Node from End in Linked List -- Two Approaches (Two Traversals and Single Traversal) - 
VVI(11) Middle of Linked List -- Two Approaches (Two Traversals and Single Traversals)
VI(12) Find Loop in a Linked List: Two Approaches - With and Without Hashing
(13) Merge Two Sorted Linked Lists: 

(14) Merge K Sorted Linked Lists
(15) Merge K Sorted Arrays
(16) Rotate List in K Size (K>N --- Convert into Cicular)


"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".





Disadvantages of Linked Lists:

(1) No Random Access, Only Sequential Access

Array:

arr = {1,2,3,4,5}
Index: 0 to 4

arr[3] = 4
arr[idx] = Element


If I know the index of any element, 
I can Directly reach to that Element in O(1) Time.


- No Need to start from Beginning




Linked Lists:

head: A -> B -> C -> D -> E -> null

Cannot Go Directly from A to D
- No Concept of Indexing

To reach any Node in LL, I MUST START frm head

------ ONLY SEQUENTIAL ACCESS


Real Life Example:

4 Friends, College Reunion

A -> B -> C -> D

A: Has Contact of B
B: Has Contact of C
C: Has Contact of D

A will call B, B will call C, C will call D









(2) No Backtracking in SLL

Arrays:

a = {1,2,3,4,5}

L to R, R to L

i++: L to R
i--: R to L




Linked Lists:

head: A -> B -> C -> D -> null

Cannot Go Back: Reverse
- Single LL


Possible: Double LL

head: A <-> B <-> C <-> D -> null












CODE:


C++:

struct Node
{
	int data;
	struct Node *next = NULL; // Self-Referential Structure
}



Java:

class Node
{
	int data;

	Node (int data)
	{
		this.data = data;
		Node next = null; // Self-Referential Object
	}
}


Py:


class Node:
	def __init__(self, data):
		self.data = data
		self.next = None // Self-Referential Object













class A
{

}


int main()
{
	A obj;
	A obj2;
}






Structure of Node of a Linked List:

1,                              2,                        3,
next: NULL						next: NULL				  next: NULL


IMP: Every Node will have EXACT SAME Structure

{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}






Collection Framework:

import java.util.*;

LinkedList<type> name = new LinkedList<type>;

Eg:

LinkedList<String> ll = new LinkedList<String>;
ll.add("Devang");
ll.remove("Devang");








Q: Form a Linked List from Nodes


// Structure/Blueprint of Node of a Linked List
class Node
{
	int data;

	Node (int data)
	{
		this.data = data;
		Node next = null; // Self-Referential Object
	}
}


public static void main(String[] args)
{
	// Creating Nodes
	Node first = new Node(1);
	Node second = new Node(2);
	Node third = new Node(3);

	1,                              2,                        3,
	next: NULL						next: NULL				  next: NULL

	// Connecting Nodes

	first.next = second;
	// 1-> 2

	second.next = third;
	// 2 -> 3

	// Train - Connected Components
	LL: 1 -> 2 -> 3 -> null
}

End/Last Node of Linked List?

if (node.next == null) - Last Node of LL/ Last Compartment of Train


C++: -> Arrow
Java/Py: . Dot Operator



















Pattern:

Ques, IP, OP, Company, Function


30 sec
Completed Function, TC, SC


// Structure/Blueprint of Node of a Linked List
class Node
{
	int data;

	Node (int data)
	{
		this.data = data;
		Node next = null; // Self-Referential Object
	}
}



Q-1: Traversal: Printing a Linked List


IP: head: 1 -> 2 -> 3 -> 4 -> 5 -> null
OP: [1 2 3 4 5]



C++:

void printList(Node* head)
{

}


Java:

void printList(Node head)
{

}


Py:

def printList(head):



Solution:


IP: head: 1 -> 2 -> 3 -> 4 -> 5 -> null
OP: [1 2 3 4 5]


void printList(Node head)
{
	while(head.next != null) // Last Node DOES NOT Satisfy the Condition
	{
		System.out.print(head.data + " ");
		head = head.next;
	}
}

OP: 
[1 2 3 4]



CORRECT CODE:

void printList(Node head)
{
	Node temp = head; // Dummy Node
	while(temp != null)
	{
		System.out.print(temp.data + " ");
		temp = temp.next;
	}
}

OP: [1 2 3 4 5]



- Loose Head of LL/ Do Not Preserve

Initial:

head: 1 -> 2 -> 3 -> 4 -> 5 -> null

After:

1 -> 2 -> 3 -> 4 -> 5 -> null
						head


Using Dummy Node:

head: 1 -> 2 -> 3 -> 4 -> 5 -> null
							   temp




TC: O(N)
SC: O(1)














Q-2: [Amazon] Count the Number of Nodes in a LL/ Length of Linked List

head: 1 -> 2 -> 3 -> 4 -> 5 -> null

OP: 5



int lengthofLL(Node head)
{
	Node temp = head;
	int length = 0;

	while(temp != null)
	{
		++length;
		temp = temp.next;
	}

	return length;
}




TC: O(N)
SC: O(1)


HW:
Write Recursive Version of lengthofLL()










Q-3: [Adobe] Search in a Linked List


LL, int key


head: 1 -> 2 -> 3 -> 4 -> 5 -> null


IP: 2
OP: true

IP: 7
OP: false


boolean searchinLL(Node head, int key)
{
	Node temp = head;

	while(temp != null)
	{
		if (temp.data == key)
			return true;

		temp = temp.next;
	}

	return false;
}


Brownies Points:


TC: Best Case: O(1) - First Node
	Worst Case: O(N) - Last Node/ Node Not Present 

SC: O(1)











Q-4: [Microsoft] Print Kth Node from Beginning in a Linked List

LL, int K


head: 10 -> 20 -> 30 -> 40 -> 50 -> null


K = 2
OP: 20

K = 4
OP: 40

Constraints:
1 <= K <= N



int KthNode(Node head, int K)
{
	Node temp = head;
	int count = 0;

	while (temp!= null)
	{
		++count;

		if (count == K)
			return temp.data;

		temp = temp.next;
	}

	return -1;
}


TC: O(K), 1 <= K <= N
SC: O(1)











VVVVVVVVI
Q-5: Kth Node from End in Linked List: SPECIAL
[Google, Cisco, Adobe, Paypal, Flipkart]


LL, int K


head: 10 -> 20 -> 30 -> 40 -> 50 -> null


K = 1
OP: 50

K = 4
OP: 20

Constraints:
1 <= K <= N


int KthNodefromEnd(Node head, int K)
{

}




Solution:


Good Developer vs Very Good Developer Approach

Two Approaches:

(1) Good Developer Approach

Kth Node from End
= len-K+1 from Beginning




K = 1
len= 5

OP: 50

len-K+1 = 5-1+1 = 5th - OP: 50

From Beginning: len - K + 1


Complexity:

(1) Calculate Length: O(N)
(2) Traverse (len-K+1) from Beginning and then return that Node: O(N-K+1)


TC: O(N) + O(N-K+1) = O(2*N)

Worst Case: K = 1





In Real Life Production:

N = 10^9

O(N): Single Traversal: 10^9 Iterations
O(2*N): Double Traversal: 2*10^9 Iterations


Phonepe/Paytm/Gpay:

UPI: Payments


Paytm: 2 sec
Phonepe: 2 sec


Code: O(N) -> O(2*N) in Paytm Codebase


Paytm: 4 sec
Phonepe: 2 sec


Latency Increased by 2 Times

Report: Amazon Losed USD 7 Bn Dollars for each second of delay in search per year






(2) Very Good Developer Approach:

Single Traversal: O(N)


Two Pointers/ Hare and Tortoise/ Fast and Slow Pointer:


Approach:

Intial:

slow: head
fast: head + K


Start Traversal:
(Move Both by 1 step - same speed)

slow = slow.next
fast = fast.next


fast == null: STOP
slow -> Kth Node from End

TC: O(N)
SC: O(1)



Why This Works?

a and b : diff k
Add SAME VALUE, diff = k: ALWAYS


a = 5
b = 7
k = 2

a+10, b+10

5+10 = 15
7+10 = 17
diff = 2 = K


(a-b) = k

(a+val)-(b+val)
= a - b 
= K



DRY RUN:


head: 10 -> 20 -> 30 -> 40 -> 50 -> null

K = 2
OP: 40


head = 10

Intial:

slow = head = 10
fast = head + K = 30


Start Traversal:
(Move Both by 1 step - same speed)

slow = 10 -> 20
fast = 30 -> 40

slow = 20 -> 30
fast = 40 -> 50

slow = 30 -> 40: Kth Node from End
fast = 50 -> null: STOP


OP: 40


TC: O(N)
SC: O(1)




Example:

100 Metres Race


Before Race:

A: 10 M
B: 50 M


Intial Diff = 40 M


During the Race, 
Speed of A == Speed of B


B -> 100 M
A -> 100-40 = 60 M





CODE:

int KthNodefromEnd(Node head, int K)
{
	Node slow = head;
	Node fast = head;

	while(K!=0) // O(K)
	{
		fast = fast.next;
		K--;
	}

	while (fast!=null) // O(N-K)
	{
		slow = slow.next;
		fast = fast.next;
	}

	return slow.data;
}


TC: O(N)
SC: O(1)










HW:
- NGE-3
- NGE-4
- Write Recursive Version of lengthofLL()






