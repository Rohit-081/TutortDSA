Date : 30th March 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:

- Trees
- What (Use Case): DONE
- Why (Applications): DONE
- How (Coding/Implementation): DONE
- Traversals: DONE
- Binary Search Trees: DONE
- Interview Questions on BT and BST: DONE

Trees- Binary Trees

https://leetcode.com/problems/minimum-depth-of-binary-tree/: DONE
https://leetcode.com/problems/maximum-depth-of-n-ary-tree/: DONE
https://leetcode.com/problems/balanced-binary-tree/: 
LC - Premium : https://leetcode.com/problems/binary-tree-upside-down/ 


Trees- Binary Search Trees

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree - IMP
https://leetcode.com/problems/minimum-absolute-difference-in-bst: DONE
https://leetcode.com/problems/search-in-a-binary-search-tree: DONE
https://leetcode.com/problems/range-sum-of-bst: DONE

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".






Q-16: [LC-938] Range Sum of BST
https://leetcode.com/problems/range-sum-of-bst/description/

Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.


Example 2:


Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23
Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.
 

Constraints:

The number of nodes in the tree is in the range [1, 2 * 104].
1 <= Node.val <= 105
1 <= low <= high <= 105
All Node.val are unique.



    public int rangeSumBST(TreeNode root, int low, int high) 
    {

    }



Solution:

[low, high]

Approach:
Every Value such that: L <= node.val <= R would be taken into sum



CODE:


class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) 
    {
        if (root == null)
            return 0;

        return (root.val >= low && root.val <= high ? root.val: 0)
        + rangeSumBST(root.left, low, high)
        + rangeSumBST(root.right, low, high);
    }
}


T: O(N), S: O(N)











[IMP]
Q-17: [LC-103] Binary Tree Zigzag Level Order Traversal
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/

Given the root of a binary tree, return the zigzag level order traversal of its nodes values. 
(i.e., from left to right, then right to left for the next level and alternate between).

 
Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100


    public List<List<Integer>> zigzagLevelOrder(TreeNode root) 
    {

    }



Bonus Point:
- Template Code:
- With Minimal Changes it can be converted to Level Order Traversal

LOT <------> Zigzag LOT : Minimum Code Changes	


Understanding:

LOT:
3 9 20 15 7


ZigZag LOT:
3 20 9 15 7




Solution:

OP:

List of Lists/Vector of Vectors

Each Level: [List] - L to R, R to L, based upon Level
Final Ans: [List of Lists]


Ways:

(1) count - For Counting Level

count % 2 == 0: L to R
Else: R to L

- Valid for All Languages

(2) Python Specific Solution

arr = [1,2,3,4]

print(arr[::1])
[1 2 3 4]

print(arr[::-1])
[4 3 2 1]


-1 * -1 * -1 * -1 ..................Even Times = 1
							.........Odd Times = -1




arr[::1]: L to R	
arr[::-1]: R to L	

After Every Level: Multiply by -1	





CODE:


------> Python Code


'''
Trick:

-1 * -1 * -1 * -1.......Even Times = 1
-1 * -1 * -1 * -1.......Odd Times =  -1

arr[::1]: left to right
arr[::-1]: right to left = reverse of arr[::1]

After Every Level: Multiply by -1


1st level: L to R
Multiply by -1

2nd level: R to L
Multiply by -1

3rd level: L to R


'''      

from collections import deque

class Solution(object):
    def zigzagLevelOrder(self, root):
        
        if not root:
            return []
        
        queue = deque([root])
        result, direction = [], 1 # result: 2-D List
        
        while queue:
            level = [] # 1-D List
            
            for i in range((len(queue))):
                node = queue.popleft()
                level.append(node.val)
                
                 # Going from left to right at any level
                if node.left: 
                    queue.append(node.left)
                    
                if node.right: 
                    queue.append(node.right)
                    
            result.append(level[::direction])
            
            direction *= (-1) # Comment this line -> Will become LOT/BFS
            # 1 * -1 = -1: right to left, 
            # -1 * -1 = 1: left to right - Alternate
        
        return result    
            
            


TC: O(N)
SC: O(N) - Queue






-------> JAVA Code:


// T - O(N), S - O(N) - Queue

// Approach - Using BFS/LOT - Go to each level and figure L to R or R to L based upon count of each level

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) 
    {
        List<List<Integer>> answer = new ArrayList<>();
        
        if (root == null)
            return answer;
        
        int level = 0;
        bfsHelper(root, answer, level);
        
        return answer;
    }
    
    // ZigZag BFS/LOT
    public void bfsHelper(TreeNode root, List<List<Integer>> answer, int level)
    {
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        
        while (!q.isEmpty())
        {
            int size = q.size();
            
            // Results of Nodes at 1 Particular Level
            
            List<Integer> levelNodeList = new ArrayList<>();
            int i = 0;
            
            for (i=0; i<size; i++)
            {
                TreeNode temp = q.poll();
                levelNodeList.add(temp.val);
                
                // Recur on Left Subtree
                if (temp.left!=null)
                    q.add(temp.left);
                
                
                // Recur on Right Subtree
                if (temp.right!=null)
                    q.add(temp.right);                
            }
            
            // After this for loop, 
            // I have LEFT TO RIGHT Values of a A Particular Level 
            
            // Based upon ODD/EVEN, Change the Direction (Reverse)
            
            // for odd level, reverse the levelNodeList            
            if (level % 2 != 0)
                Collections.reverse(levelNodeList);
            // [9 20 ] -> [20 9]
            
            level++;
            
          answer.add(levelNodeList);                        
        }        
    }
}















----------> LCA: BT and BST

Understanding:

LCA: Lowest Common Ancestor


LCA of two nodes n1 and n2 is defined as LOWEST Node in a Tree
That has BOTH n1 and n2 as Descendants


Note: n1 and n2 can be Descendants of each other
(They Can Belong to same Subtree)



OR


LCA of Two Nodes n1 and n2 is the COMMON Ancestor of n1 and n2 which is FARTHEST from Root



Eg:


										1
									2       3	
								  4   5   6  7   	



(1) LCA (4,5) = 2
1 and 2 BOTH are COMMON Ancestors, but LCA is 2


(2) LCA(4,6) = 1
Both are in different subtrees, LCA: root


(3) LCA(3,4) = 1
Both are in different subtrees, LCA: root


(4) LCA(2,4) = 2
One id Descendants of Other, Parent: LCA


Note:
Every Node is a Descendants of itself
Every Node is an Ancestor of itself















[IMP]
Q-18: [LC-236] Lowest Common Ancestor of a Binary Tree
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/


Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.


Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.





    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
    {


    }




Understanding:

LCA(5,2) = 5
LCA(6,1) = 3
LCA(7,4) = 2 (Common Ancestor: 3,5,2 but LCA: 2)
LCA(5,1) = 3
LCA(3,8) = 3
LCA(5,4) = 5





Solution:


(1) Brute Force to find LCA:

- Path from root to n1
- Path from root to n2
- Last Common Element in the Path: LCA


Eg:


										1
									2       3	
								  4   5   6  7   	



(1) LCA (4,5) = 2
1 and 2 BOTH are COMMON Ancestors, but LCA is 2



Path from Root to 4: [1 2 4]
Path from Root to 5: [1 2 5]

Last Common Element in Paths = 2: LCA


(2) LCA(4,6) = 1
Both are in different subtrees, LCA: root

Path from Root to 4: [1 2 4]
Path from Root to 6: [1 3 6]

Last Common Element in Paths = 1: LCA



(3) LCA(3,4) = 1
Both are in different subtrees, LCA: root

Path from Root to 3: [1 3]
Path from Root to 4: [1 2 4]

Last Common Element in Paths = 1: LCA







Complexity:

- Root to n1
First Traversal: O(N)
Space: Store in arr1[]


- Root to n2
Second Traversal: O(N)
Space: Store in arr2[]



TC: O(N) + O(N)
SC: O(N) + O(N)



Drawback:
- 2 Iterations of Tree
- Extra Space for 2 Arrays






Can It be Solved in a Single Traversal? - YES





(2) Optimised Solution: Single Traversal


Eg:


										1
									2       3	
								  4   5   6  7   	



(1) LCA (4,5) = 2
1 and 2 BOTH are COMMON Ancestors, but LCA is 2


(2) LCA(4,6) = 1
Both are in different subtrees, LCA: root


(3) LCA(3,4) = 1
Both are in different subtrees, LCA: root


(4) LCA(2,4) = 2
One id Descendants of Other, Parent: LCA






Case-1: If n1 || n2 matches the root , LCA = root (Eg: 1,6)
If Not, Then Recur for left and right Subtrees


Case-2: If n1 and n2 lies in left and right subtrees (different subtrees)
LCA = root (Eg: 4,7)


Case-3: If n1 and n2 belong to left subtree, 
LCA would be in left subtree  (Eg: 2,4)


Case-4: If n1 and n2 belong to right subtree,
LCA would be in right subtree (Eg: 3,7)






CODE:

class Solution {
    
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
    {

  // Base Case
  if (root == null)
    return null;

  // Case 1: If n1 || n2 matches root, LCA = root (Eg: 1,6)
  if (root.val == p.val || root.val == q.val)
    return root;

  // If Not, Then recur for left and right subtrees
  TreeNode left_lca = lowestCommonAncestor(root.left, p, q);
  TreeNode right_lca = lowestCommonAncestor(root.right, p, q);

/*
  if (left_lca != null)          
      System.out.println("Left LCA: " + left_lca.val);          
   if (right_lca != null)          
        System.out.println("Right LCA: " + right_lca.val);          
*/

 // Case 2: If n1 and n2 lies in left and right subtrees, LCA = root (Eg: 4,7)
  // If n1 and n2 lies in left and right subtree respectively, then left_lca and right_lca BOTH would be Non-Null

  if (left_lca!=null && right_lca!=null)
    return root;


  //  Case 3: If n1 and n2 belong to left subtree, LCA would be in Left Subtree (Eg: 2,4)
  if (left_lca != null)
    return left_lca;

  //  Case 4: If n1 and n2 belong to right subtree, LCA would be in Right Subtree (Eg: 3,7)
  else
    return right_lca;        
    }
}


TC: O(N)
SC: O(H)








HW:

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/












[IMP]
Q-19: [LC-437] Path Sum III
https://leetcode.com/problems/path-sum-iii/description/


Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

 

Example 1:


Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.


Example 2:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [0, 1000].
-109 <= Node.val <= 109
-1000 <= targetSum <= 1000



    public int pathSum(TreeNode root, int sum) 
    {

    }


Solution:

(1) Brute Force Approach:

Check for All Possible Paths that lead to targetSum

TC: O(N^2)
SC: O(N) + O(N)



(2) Using Prefix Sum Approach

									  1
								 2.      3	
						       4.   5.  6.  7 		 


Prefix Sum in the Node:

								      	1 (1)
								 2 (3)        3 (4)	
							 4 (7) 5 (8)    6 (10) 7 (11)	


Advantage:

Just Look for currSum == targetSum



CODE:


class Solution
{
    public int pathSum(TreeNode root, int sum) 
    {
    	if (root == null)
    		return 0;

    	return dfs(root,sum) + pathSum(root.left, sum) + pathSum(root.right, sum);
    }

    public int dfs(TreeNode root, int sum)
    {
    	if (root == null)
    		return 0;

    	return (sum == root.val ? 1: 0)
    	+ dfs(root.left, sum - root.val)
    	+ dfs(root.right, sum - root.val);
    }
}



TC: O(N)
SC: O(N)






Next:

- Graphs
- Traversals: BFS and DFS







