Date : 24th Dec 2023
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Questions:
- XOR Concept: DONE
- 136. Single Number: DONE
- 268. Missing Number: DONE
- 1720. Decode XORed Array: DONE
- Product of Array Except Self: DONE
- Prime Numbers: DONE
- Primality Test: DONE 
- Seive Of Erastothenes: DONE
- Count Primes:https://leetcode.com/problems/count-primes/: DONE 
- Sexy Primes: https://www.codechef.com/problems/EXCG1806: DONE
(Sliding Window Algo) 
- Max Consecutive Ones-1: https://leetcode.com/problems/max-consecutive-ones/
- Max Consecutive Ones-2: https://leetcode.com/problems/max-consecutive-ones-ii/
 (LC Premium)
- Lintcode: https://www.lintcode.com/problem/883/description
- Max Consecutive Ones-3: https://leetcode.com/problems/max-consecutive-ones-iii/

- Strings: DONE
- https://leetcode.com/problems/valid-anagram/: DONE
- https://leetcode.com/problems/first-unique-character-in-a-string/
- https://leetcode.com/problems/longest-substring-without-repeating-characters/ 
- https://leetcode.com/problems/longest-palindrome/

TODO:

- Stacks And Queues

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".





---------> Palindrome

Left to Right, Right to Left: SAME


"katak": L to R
"katak": R to L


12321: Palindrome



Q-3: Check if a String is Palindrome or Not

boolean isPalindrome(String s)
{

}


IP: "katak"
OP: true

IP: "abca"
OP: false


Solutions:

(1) Reverse String and Check 

string s2 = reverse(s.begin(), s.end()); // In Place Function
return s2 == s;

TC: O(N)
SC: O(1)


Java:

Collections.reverse(s);



(2) Two Pointers


boolean isPalindrome(String s)
{
	int left = 0, right = n-1;

	while (left <= right)
	{
		if (s[left] != s[right])
			return false;

		left++;
		right--;
	}

	return true;
}


TC: O(N/2)
SC: O(1)



(3) Travel Till Half and Check

boolean isPalindrome(String s)
{
	for (i=0; i<n/2; i++)
	{
		if (s[i] != s[n-1-i])
			return false;
	}

	return true;
}

TC: O(N/2)
SC: O(1)

























Q-4: [LC-387] First Unique Character in a String
https://leetcode.com/problems/first-unique-character-in-a-string/


Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0

Example 2:

Input: s = "loveleetcode"
Output: 2

Example 3:

Input: s = "aabb"
Output: -1
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.



    public int firstUniqChar(String s) 
    {

    }





Solution:


Understanding:


leetcode

Unique: l, t, c, o, d
First Unique: l: Index: 0: OP

loveleetcode

Unique: v, t, c, d
First Unique: v: Index: 2: OP






(1) Brute Force:
Two Nested Loops

Check for First Character repeated, return from there


TC: O(N^2)
SC: O(1)



(2) Map
- char: freq


if (freq == 1)
	return index; // first character with freq = 1


Order is Important:

LinkedHashMap: Java
unordered_map: C++


TC: O(N) + O(Unique(String)) // At Max: 26
SC: O(Unique(String)) // At Max: 26




(3) Array


freq[26];


Check for freq == 1

TC: O(N) + O(Unique(String)) // At Max: 26
SC: O(Unique(String)) // At Max: 26




CODE:

// TC: O(N) + O(N)
// SC: O(26)

class Solution {
    public int firstUniqChar(String s) 
    {
        int freq[] = new int[26];
        int i = 0;

        for (i=0; i<s.length(); i++)
        {
            freq[s.charAt(i) - 'a']++;
        }

        for (i=0; i<s.length(); i++)
        {
            if (freq[s.charAt(i) - 'a'] == 1)
                return i;
        }

        return -1;
    }
}














Q-5: [Google] [LC-3] Longest Substring Without Repeating Characters ----- IMP
https://leetcode.com/problems/longest-substring-without-repeating-characters/


Given a string s, find the length of the longest substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.


Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.


Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.





Understanding:

abcabcbb

abc
OP: 3

bbbbb

OP: 1

pwwkew

pw: 2
wke: 3

OP: 3


    public int lengthOfLongestSubstring(String s) 
    {

    }




Solution:


Non Repeating Characters: Unique Characters: Set/ Map


Longest Substring Without Repeating Characters:
- Maximum Size of Non Repeating Window



Approach:

Sliding Window + Set


(1) If Unique Characters (Not present in Set),
Increase Window Size: j++

(2) If Repeating Characters (Present in Set),
Decrease Window Size: i++

Maintain ans = max(j-i+1)




DRY RUN:

Input: s = "abcabcbb"
Output: 3


i = 0, j = 0

i = 0, j = 1
s[i] = a, s[j] = b
Unique Characters: 
Increase Window: j++

ans = max(j-i+1) = 2


i = 0, j = 2
s[i] = a, s[j] = c
Unique Characters: 
Increase Window: j++

ans = max(j-i+1) = 3


i = 0, j = 3
s[i] = a, s[j] = a
Repeating Characters: 
Decrease Window: i++








CODE:


// Approach: Sliding Window + Set

class Solution {
    public int lengthOfLongestSubstring(String s) 
    {
        int i=0, j=0, max =0;
        HashSet<Character> set = new HashSet<Character>();
        
        while (j < s.length())
        {
            // Not Contained in Set, Increase Window
            if (!set.contains(s.charAt(j)))
            {
                set.add(s.charAt(j));
                j++;
                max  = Math.max(max,set.size());
            }
            
            else
            {
                // Already Contained in Set, Decrease Window
                set.remove(s.charAt(i));
                i++;
            }
        }
            return max;   
    }
}



TC: O(N)
SC: O(N)




C++:



// TC: O(N)
// SC: O(256)

class Solution 
{
public:
    int lengthOfLongestSubstring(string s) 
    {
        int n = s.size();
        
        if (n <= 1)
            return n;
        
        unordered_set<char> set;
        int left = 0, right = 0;
        int ans = 1;
        
        while (left < n && right < n)
        {
            // Unique Values ---> Expand Window: right++
            // if !(set.contains(s[right])): JAVA
            // if s[right] not in set: PY
    
            if (set.find(s[right]) == set.end())
            {
                set.insert(s[right]);
                right++;
                ans = max(ans, right-left);
            }
            
            // Repeating Values ----> Shrink Window: left++
            else
            {
                set.erase(s[left]);
                left++;
            }
        }
            
            return ans;
    }
};

































Q-6: [Google] - [LC-159] - Longest Substring with At Most Two Distinct Characters - IMP
https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/
https://www.lintcode.com/problem/928/

Given a string s, return the length of the longest 
substring that contains at most two distinct characters.

 

Example 1:

Input: s = "eceba"
Output: 3
Explanation: The substring is "ece" which its length is 3.


Example 2:

Input: s = "ccaabbb"
Output: 5
Explanation: The substring is "aabbb" which its length is 5.
 

Constraints:

1 <= s.length <= 105
s consists of English letters.




    public int lengthOfLongestSubstringTwoDistinct(String s) {
        
    }



Understanding:


Substring       Distinct Chars       Size

ec               2                    2
ece              2                    3: ANS
eceb             3                    4
eceba            4                    5




Solution:


class Solution 
{
    public int lengthOfLongestSubstringTwoDistinct(String s)    
    {
        int[] freq = new int[128];
        int left = 0, right = 0;
        int ans = 0, n = s.length();
        int uniqueCharCount = 0;
        int k = 2;

        while (right < n)
        {
            // right++: Expanding the Window: ALWAYS
            // Post increment freq = 0, Means CURRENT Freq is 0 - Unique
            if (freq[s.charAt(right++)]++ == 0)
            {
                uniqueCharCount++;

                while (uniqueCharCount > k)
                {
                    // left++: Shrinking the Window
                    // Shrink the Window only when there is repeating char and till freq == 0
                    // freq == 0, No More Reepating char

                    if (--freq[s.charAt(left++)] == 0)
                    {
                        uniqueCharCount--;
                    }
                }
            }
            ans = Math.max(ans, right-left);
        }

        return ans;
        
    }
}


TC: O(N)
SC: O(128)













Q-7: [Google] [LC-340] Longest Substring with At Most K Distinct Characters - IMP
https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/description/
https://www.lintcode.com/problem/386


Given a string s and an integer k, return the length of the longest 
substring of s that contains at most k distinct characters.

 

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: The substring is "ece" with length 3.


Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: The substring is "aa" with length 2.
 

Constraints:

1 <= s.length <= 5 * 104
0 <= k <= 50



    public int lengthOfLongestSubstringKDistinct(String s, int k)
    {
        
    }



Solution:




At Most K


while (count <= K)
{
	......
}



At Least 

while (count >= K)
{
	......
}




Equal

if (count == K)
{
	......
}






Solution:


Approach:

Siding Window + Map/Freq Array


(1) Map/Freq Array:
Keep Track of count of each unique character and uniqueCounter <= K


- If Unique: Expand Window Size, uniqueCounter++
- If Repeated: Decrease Window Size, uniqueCounter--


(2) Maintain Window Size Using left and right Pointer


TC: O(N)
SC: O(128)






CODE:





TC: O(N)
SC: O(128)

class Solution 
{
    public int lengthOfLongestSubstringKDistinct(String s, int k) 
    {
        int[] freq = new int[128];
        int left = 0, right = 0;
        int ans = 0, n = s.length();
        int uniqueCharCount = 0;

        while (right < n)
        {
            // right++: Expanding the Window: ALWAYS
            // Post increment freq = 0, Means CURRENT Freq is 0 - Unique
            if (freq[s.charAt(right++)]++ == 0)
            {
                uniqueCharCount++;

                while (uniqueCharCount > k)
                {
                    // left++: Shrinking the Window
                    // Shrink the Window only when there is repeating char and till freq == 0
                    // freq == 0, No More Repeating char
                    if (--freq[s.charAt(left++)] == 0)
                    {
                        uniqueCharCount--;
                    }
                }
            }
            ans = Math.max(ans, right-left);
        }

        return ans;
    }
}








int[] freq = new int[26];


freq: [0.......25]

freq[0]: Freq of 'a'
freq[25]: Freq of 'z'



abc


freq = [1,1,1......0]







Next:
- Stacks And Queues















