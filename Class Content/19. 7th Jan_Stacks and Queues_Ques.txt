Date : 7th Jan 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:


Stacks 
- Use Case- DONE
- Applications- DONE
- Code- DONE

Queues
- Applications- DONE
- Use Case- DONE
- Code- DONE

Questions
- Reverse Array/String- DONE
- Balanced Parentheses - Google/Flipkart- DONE
- Leetcode 921- 
- Next Greater Element- 
- Hashing, Sets and Maps

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".




Q-3: [LC-921] Minimum Add to Make Parentheses Valid - [Google]
https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/

A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:

Input: s = "())"
Output: 1

Example 2:

Input: s = "((("
Output: 3
 

Constraints:

1 <= s.length <= 1000
s[i] is either '(' or ')'.





Simple Terms:

Minimum Number of Parentheses to "Add" to make a String Balanced

- Can Add ( OR )
- Can Add Anywhere


"())" -------> "(())"

1 (  Add

OP: 1


"()"
OP: 0


"((("
OP: 3 (3 Closing Brackets)


")))"
OP: 3 (3 Opening Brackets)


")(" -----> "()()"
OP: 2


"()()"
OP: 0





    public int minAddToMakeValid(String s) 
    {

    }


Solution:


Incorrect Approach: No Order Maintained


( - count: a
) - count: b

return abs(a-b);




"()))(("
Expected OP: 4
opening = 3
closing = 3
ans = abs(3-3) = 0





Solution:

(1) With Stack
T: O(N), S: O(N)

(2) Without Stack
T: O(N), S: O(1)





(1) With Stack:


class Solution {
    public int minAddToMakeValid(String s) 
    {
        if (s.length() == 0)
            return 0;

        Stack<Character> stack = new Stack<>();
        int i = 0;
        for (i=0; i<s.length(); i++)
        {
            // Opening Bracket
            if (s.charAt(i) == '(')
                stack.push(s.charAt(i));

            // Closing Bracket - Pop
            if (s.charAt(i) == ')')
            {
                if (stack.size()> 0 && stack.peek() =='(')
                    stack.pop();

                else
                    stack.push(s.charAt(i));
            }
        }

        return stack.size();
    }
}


T: O(N)
S: O(N)







(2) Without Stack



Approach:

Two Pointers
open = 0, close = 0

if (s[i] == '(')
	++close;

else if (close > 0)
	--close;

else
	++open;


return open + close;




Detailed Approach:

(1) Found '(' ------> ++close
(Must Add Closing Bracket to make it balanced)


(2) Found ')'
Two Cases:

(A) close > 0 -----> --close
(Found the Closing Bracket)

(B) Else ----> ++open
(Increase the Opening Bracket)

return open + close;





DRY RUN:



"()": OP: 0
open = 0
close = 0 -> 1 -> 0

return open + close = 0



")))": OP: 3
open = 0 -> 1 -> 2 -> 3
close = 0

return open + close = 3



"()))((": OP: 4
open = 0 -> 1 -> 2
close = 0 -> 1 -> 0 -> 1 -> 2

return open + close = 4





CODE:




class Solution {
    public int minAddToMakeValid(String s) 
    {
        int open = 0, close = 0;
        int len = s.length();
        int i = 0;

        for (i=0; i<len; i++)
        {
            if (s.charAt(i) == '(')
                ++close;

            else if (close > 0)
                --close;

            else
                ++open;
        }

        return open + close;
    }
}


T: O(N)
S: O(1)


















Q-4: [Amazon] Next Greater Element in an Array (NGE)
https://www.geeksforgeeks.org/problems/next-larger-element-1587115620/1

Given an Array, print the "Immediately" Next Greater Element on the right side for each element

If No NGE, print -1

arr = [4 5 2 25]
OP: [5 25 25 -1]



4 -> [5 2 25]: 5
5 -> [2 25]: 25
2 -> [25]: 25
25 -> [] : -1


Hint: Last Value ----> Always -1


int[] nge(int[] arr, int n)
{

}



Solution:


Leaders in an Array:

Maximum Value on Right
(Travel from R to L, Keep Max and compare and update)


Immediate Greater Value on Right:
- That Approach wont work




Solution:

(1) Brute Force: Two Nested Loops

4 -> [5 2 25]


Immediate NGE for 4: 5


arr = [4 5 2 25]
OP: [5 25 25 -1]


int[] nge(int[] arr, int n)
{
	int[] res = new int[n];
	res = {-1}; // res = [-1, -1, -1, -1]

	for (i=0; i<n; i++) // 4
	{
		for (j=i+1; j<n; j++) // [5 2 25]
		{
			if (arr[j] > arr[i]) // 5 > 4
			{
				res[i] = arr[j]; // res[0] = 5, res[1] = 25, res[2] = 25
				break;
			}
		}
	}

	return res; // [5 25 25 -1]
}


TC: O(N^2), 5 Pass, 5 TLE
SC: O(1)












(2) Optimised Solution: Using Stack


Why Stack:

Ordering Required for "IMMEDIATE" Next Greater Element -> Stack Required



Approach:


(1) Go from R to L
(2) Pop from Stack till get Next Greater Element on Top
OR
Stack Becomes Empty


Intuition: Dont Need Smaller Values


(3) If Stack Empty: ans: -1
(4) Else: ans: stack.top() - NGE






CODE:



arr = [4 5 2 25]
OP: [5 25 25 -1]


int[] nge(int[] arr, int n)
{
	stack<int> s;
	int res[n];

	// R to L
	for (i= n-1; i>=0; i--) // O(N)
		// arr[i] = 25, 2, 5, 4
	{
		// 25 <= 2 : FALSE - No Pop
		// 2 <= 5 : TRUE - Pop
		// 25 <= 5: FALSE - No Pop
		// 5 <= 4: FALSE - No Pop
		while(!s.empty() && s.top()<=arr[i])
			// Just Need Greater values, dont need smaller or equal values, so pop them
			s.pop(); // s = [TOP: 25]

		if(s.empty())
			res[i] = -1; // res = [_, _, _, -1]

		else
			res[i] = s.top(); // res = [5, 25, 25, -1]

		s.push(arr[i]); // s = [TOP: 4, 5, 25]
	}

	return res; // [5, 25, 25, -1]
}


OP: [5, 25, 25, -1]



TC: O(N)
SC: O(N) - Stack




Reduce TC:

(1) Increase SC 
Eg: Subarray with sum = 0

Using Set, O(N^2) -> O(N)


(2) Use Trick
Eg: Equilibrium Index

totalSum - arr[i] = rightSum

O(N^2) -> O(N)











HW: https://www.geeksforgeeks.org/problems/next-larger-element-1587115620/1










Q-5: [LC-739] Daily Temperatures
https://leetcode.com/problems/daily-temperatures/


Given an array of integers temperatures represents the daily temperatures, 
return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]


Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]


Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100



Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]




73 to 74: 1 Day
74 to 75: 1 Day

75, 71, 69, 72, 76: 4 Days



    public int[] dailyTemperatures(int[] temperatures) {

    }


Solution:


"Next Greater Temperature/Element on Right and Diff Between Indices"


73: 0
74: 1
diff = 1


75: 2
76: 6
diff = 4








CODE:

// IP: [30,40,50,60]
// OP: [1,1,1,0]


class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        Stack<Integer>stack = new Stack<Integer>();
        int i = 0;
        int n = temperatures.length;
        int[] res = new int[n]; // [0 0 0 0]
        int idx = -1;

        for (i=0; i<n; i++) // L to R
        {
            // temp[0] < temp[1]: 30 < 40: TRUE
            // temp[1] < temp[2]: 40 < 50: TRUE
            // temp[2] < temp[3]: 50 < 60: TRUE
            while(!stack.isEmpty() && temperatures[stack.peek()] < temperatures[i])
            {
                idx = stack.pop(); // idx = 0, idx = 1, idx = 2
                res[idx] = i - idx; // diff of indices
                // res[0] = 1 - 0 = 1 = [1 _ _ _ ]
                // res[1] = 2 - 1 = 1 = [1 1 _ _]
                // res[2] = 3 - 2 = 1 = [1 1 1 _]
            }

            stack.push(i); // s: [3: TOP]
        }

        return res; // [1 1 1 0]
    }
}



TC: O(N)
SC: O(N)














Q-6: [LC-496] Next Greater Element - I - IMP
https://leetcode.com/problems/next-greater-element-i/


The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.


Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
 

Constraints:

1 <= nums1.length <= nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 104
All integers in nums1 and nums2 are unique.
All the integers of nums1 also appear in nums2.
 

Follow up: Could you find an O(nums1.length + nums2.length) solution?


    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        
    }




Solution:




Understadning:


nums1 = [4,1,2] - SUBSET
nums2 = [1,3,4,2] - SUPERSET

4 -> Index of 4 in nums2 = j = 2,
NGE of 4 in nums2 = -1

1 -> Index of 1 in nums2 = j = 0,
NGE of 1 in nums2 = 3

2 -> Index of 2 in nums2 = j = 3,
NGE of 2 in nums2 = -1

Final OP: [-1, 3, -1]










HW:

(1) https://www.geeksforgeeks.org/problems/next-larger-element-1587115620/1
(2) https://leetcode.com/problems/next-greater-element-i/
(3) NGE-3
(4) NGE-4 : HARD






































