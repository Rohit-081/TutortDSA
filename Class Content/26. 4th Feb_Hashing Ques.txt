Date : 4th February 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:

- Sorting - Theory + Questions: DONE
- Sorting LC Questions: DONE
https://leetcode.com/problems/kth-largest-element-in-an-array/: DONE
https://leetcode.com/problems/sort-colors/: DONE
https://leetcode.com/problems/largest-number/: DONE
https://leetcode.com/problems/sort-list/: DONE
https://leetcode.com/problems/contains-duplicate/: DONE
https://leetcode.com/problems/contains-duplicate-ii/: DONE
https://leetcode.com/problems/contains-duplicate-iii/: DONE

- Hashing- Sets and Maps: Questions
https://leetcode.com/problems/isomorphic-strings/ - IMP - 
https://leetcode.com/problems/longest-consecutive-sequence/ - IMP - 

TODO:
https://leetcode.com/problems/find-the-difference/ - 
https://leetcode.com/problems/most-common-word/ - IMP - 

https://leetcode.com/problems/ugly-number-ii/
https://leetcode.com/problems/majority-element-ii/

- Recursion - Questions
- Queue: LC Questions
- Dynamic Programming 


"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".





Q-6: [LC-220] Contains Duplicate III
https://leetcode.com/problems/contains-duplicate-iii/description/

You are given an integer array nums and two integers indexDiff and valueDiff.

Find a pair of indices (i, j) such that:

i != j,
abs(i - j) <= indexDiff.
abs(nums[i] - nums[j]) <= valueDiff, and

Return true if such pair exists or false otherwise.

 

Example 1:

Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0
Output: true

Explanation: We can choose (i, j) = (0, 3).
We satisfy the three conditions:
i != j --> 0 != 3
abs(i - j) <= indexDiff --> abs(0 - 3) <= 3
abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0

Example 2:

Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3
Output: false

Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.
 

Constraints:

2 <= nums.length <= 105
-109 <= nums[i] <= 109
1 <= indexDiff <= nums.length
0 <= valueDiff <= 109









Understanding:

i != j
abs(i - j) <= indexDiff
abs(nums[i] - nums[j]) <= valueDiff





Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0


1: 0
2: 1
3: 2
1: 3


1-1 = 0 <= valueDiff: true
abs(0-3) = 3 <= indexDiff: true


OP: true






Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3


i != j
abs(i - j) <= indexDiff
abs(nums[i] - nums[j]) <= valueDiff




1,1: valueDiff satisfied, indexDiff not satisfied
5,5: valueDiff satisfied, indexDiff not satisfied
9,9: valueDiff satisfied, indexDiff not satisfied

1,5: indexDiff satisfied, valueDiff not satisfied 
5,9: indexDiff satisfied, valueDiff not satisfied 
1,9: indexDiff satisfied, valueDiff not satisfied 


OP: false




 public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) 
    {   
   

   }





Solution:



(1) Brute Force Solution:

i != j
abs(i - j) <= indexDiff
abs(nums[i] - nums[j]) <= valueDiff




// TC: O(N^2)
// SC: O(1)

class Solution 
{
    // 2 <= nums.length <= 105
    // TC: O(N^2): Give TLE for Exact N^2 for Test Case for 10^5
    // 46 / 51 testcases passed
    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) 
    {   
        int n = nums.length; 
        System.out.println(n);
        for (int i =0; i<n; i++)
        {
            for (int j= i+1; j<n; j++)
            {
                if (Math.abs(nums[i]-nums[j]) <= valueDiff)
                {
                    if (Math.abs(i-j) <= indexDiff)
                        return true;
                }
            }
        }
        
        return false;
    }
}


Edge Cases:
N = 100000 = 10^5


TC: O(N^2)
SC: O(1)












(2) Optimisation Over Brute Force:


// TC < O(N^2): O(N * indexDiff)
// SC: O(1)

class Solution 
{
    // 2 <= nums.length <= 105
    // TC: O(N^2): Give TLE for Exact N^2 for Test Case for 10^5
    // 48 / 51 testcases passed - All Passed
    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) 
    {   
        int n = nums.length; 
        System.out.println(n);
        for (int i =0; i<n; i++)
        {
            for (int j= Math.max((i-indexDiff), 0); j<i; j++)
            {
                if (Math.abs(nums[i]-nums[j]) <= valueDiff)
                {
                        return true;
                }
            }
        }
        
        return false;
    }
}


Edge Cases:
N = 100000 = 10^5



TC < O(N^2): O(N * indexDiff)
SC: O(1)






------> Optimisation Over Brute Force:


class Solution {

    // 2 <= nums.length <= 105
    // TC: O(N^2): Give TLE for Exact N^2 for Test Case for 10^5
    // 48 / 51 testcases passed - All Passed

    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {
        int k=0;
        for(int i=0;i<nums.length;i++){
                k=1;
                while(k <= indexDiff){ 
                    if(i+k < nums.length){
                         if(Math.abs(nums[i]-nums[i+k])<=valueDiff)
                            return true;
                       
                    }
                    k++;
                }
        }
        return false;
    }
}











-------> Optimised Solution:


abs(x) = 3
x = +3, -3

abs(a-b) <= valueDiff

a-b <= +- valueDiff


2 Conditions:

a-b <= valueDiff OR a-b <= -valueDiff






CODE:




// https://docs.oracle.com/javase/10/docs/api/java/util/SortedSet.html#subSet(E)

// TC: O(N*logN) (log N -> subSet Function)
// SC: O(N) - TreeSet

class Solution 
{
    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) 
    {
        // Base Case:
        if (nums == null || nums.length == 0)
            return false;

        TreeSet<Long> set = new TreeSet<Long>();
        set.add((long)nums[0]);

        int n = nums.length; 
        int i = 1;

        for (i=1; i<n; i++) // O(N)
        {
            // Part-1: Window Size: <= indexDiff, abs(i-j) <= indexDiff
            if (i > indexDiff)
            {
                set.remove((long)nums[i-indexDiff-1]);
            } 

            // Part-2: abs(nums[i] - nums[j]) <= valueDiff
           // 2 Conditions: a-b <= valueDiff OR a-b <= -valueDiff

           long left = (long)nums[i] - valueDiff; // left range
           long right = (long)nums[i] + valueDiff; // right range

        // nums[i] - nums[j] <= valueDiff
        // By this time, window size is <= indexDiff, Only condition to check is value difference
        // If there is ANY PAIR which satisfies the value condition - return true
        // subset generated from left to right is NOT EMPTY -> true

            if (left <= right && !set.subSet(left, right+1).isEmpty()) // O(log N)
            return true;


            set.add((long)nums[i]);
        }

        return false;
    }
}












  // If there is ANY PAIR which satisfies the value condition - return true
  // subset generated from left to right is NOT EMPTY -> true


indexDiff: satisfied

Onlt thing needed:
valueDiff: satisfied

B/w: [left, right] -> Any Pair -> Return true


!set.subSet(left, right+1).isEmpty() -> Return true










-----> HashSet vs LinkedHashSet vs TreeSet


arr = [9 1 6 8 4 7 3 1 2 5 4]

HashSet = [9 1 6 8 4 7 3 2 5] OR [5 2 3 7 4 8 6 1 9]
LinkedHashSet = [9 1 6 8 4 7 3 2 5]
TreeSet = [1 2 3 4 5 6 7 8 9]




HashSet = Order NOT Guaranteed, Can Store in Any Order
LinkedHashSet = Order is Guaranteed, Maintaining Order
TreeSet = Stores in Increasing Order






C++:

unordered_set: HashSet
ordered_set: Default Set: TreeSet




Py:

set = Maintains Order
dict = Maintains Order






-------> C++ Solution:





// TC: O(N * log N): set.lower_bound(): O(log N)
// SC: O(N) - Set

class Solution {
public:

    bool containsNearbyAlmostDuplicate(vector<int>& nums, int indexDiff, int valueDiff) 
{   
	set<long long> window;
	for (int i = 0; i < nums.size(); ++i) 
    {
	if (i > indexDiff && i - indexDiff - 1 < nums.size())  
    {
        window.erase(nums[i - indexDiff - 1]);
    }

	auto it = window.lower_bound((long long)nums[i] - valueDiff);
        
		if (it != window.cend() && *it - nums[i] <= valueDiff) 
            return true;

		window.insert(nums[i]);
	}
	return false;
}

};


















-------> Hashing: Sets and Maps: Questions


Theory: TBD

Note:

- Hashing is an Algorithm
- Data Structures built on top of Hashing: Sets and Maps

- Hashing is the Only Algorithm which can provide both:
(1) Insertion: TC - O(1)
(2) Retrieval/Search: TC - O(1)









--------> Questions:







Q-7: [Paypal] - [LC-205] - Isomorphic Strings
https://leetcode.com/problems/isomorphic-strings/




Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. 
No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true

Example 2:

Input: s = "foo", t = "bar"
Output: false

Example 3:

Input: s = "paper", t = "title"
Output: true
 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.




    public boolean isIsomorphic(String s, String t) 
    {


	}






Understanding:


Isomorph

Iso = Similar
Morph = Forms


Scrabble:
TAC -> CAT, ACT


2 Pics:
10 Differences








Input: s = "egg", t = "add"
Output: true



e -> a
g -> d


egg -> add: Isomorphic
IMP: All Occurrences of g -> d





egge ----> adda

e -> a
g -> d


egge -> adda: Isomorphic
IMP: All Occurrences of g -> d




egge ----> addb

e -> a, b
g -> d

egge ----> addb: NOT Isomorphic





Input: s = "foo", t = "bar"

foo ----> bar

f -> b
o -> a,r

foo ----> bar: NOT Isomorphic





Input: s = "paper", t = "title"

p -> t
a -> i
e -> l
r -> e

OP: true
IMP: All Occurrences of p -> t






abcd -> mnom: Not Isomorphic

abcd -> pqrs: Isomorphic (4 Unique Characters)

abc -> ppq : NOT Isomorphic
No two characters may map to the same character

abc -> abc: Isomorphic
A character may map to itself






Solution:


All occurences should be mapped
Set: Not right DS


Approach:

Two Strings -------> Isomorphic

"If Positions of characters follow the SAME Pattern"

s = "ABEACDB"
t = "XYIXHKY"




S:          A  B  E  A  C  D  B 
Index:      0  1  2  3  4  5  6



T:          X  Y  I  X  H  K  Y 
Index:      0  1  2  3  4  5  6





Two Strings are Isomorphic -----> Check By Index Pattern


Same Index Pattern in Two Strings,
Same Characters Replaced in All Occurrences ------> Isomorphic



Map:

key: Character
value: Index





CODE:


class Solution 
{
    public boolean isIsomorphic(String s, String t) 
    {
        // Both Strings null or Both are same - true
        if (s == null && t == null || s == t)
            return true;

        // Only 1 null, other not null - false
        if (s == null || t == null)
            return false;

         if (s.length() != t.length())
            return false;

         int i = 0;
         int indexS = -1;
         int indexT = -1;

         Map<Character, Integer> mapS = new HashMap<Character, Integer>();
         Map<Character, Integer> mapT = new HashMap<Character, Integer>();

         for (i=0; i<s.length(); i++)
         {
             indexS = mapS.getOrDefault(s.charAt(i), -1);
             indexT = mapT.getOrDefault(t.charAt(i), -1);

            // If Index pattern is not same, return false
             if (indexS != indexT)
                return false;

            // Key: Element, Value: Index
            mapS.put(s.charAt(i), i); 
            mapT.put(t.charAt(i), i);

/*
            for (Character c: mapS.keySet())
                System.out.println("Key for mapS: " + c);

            for (Integer p: mapS.values())
                System.out.println("Values for mapS: " + p);

            for (Character c: mapT.keySet())
                System.out.println("Key for mapS: " + c);

            for (Integer p: mapT.values())
                System.out.println("Values for mapS: " + p);
*/          
         }
            
       return true;    
    }
}


TC: O(N),  1 <= s.length <= 5 * 104
SC: O(256) + O(256)




























Q-8: [LC-128] Longest Consecutive Subsequence : [TRC, Amazon]
https://leetcode.com/problems/longest-consecutive-sequence/


Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109





    public int longestConsecutive(int[] nums) 
    {

	}








-----> Understanding:

Input: nums = [100,4,200,1,3,2]
Output: 4


[1 2 3 4]

- Not a Subarray
- Not a Subsequence
- A Subset


"Find length of the largest consecutive subset in the array"


[100,4,200,1,3,2]
LCS: [1 2 3 4]
OP: 4

[100,4,200,1,3,2,4,2,3,4]
LCS: [1 2 3 4]
OP: 4


Duplicates Will NOT Change My Answers







Solution:



(1) Brute Force: Sorting


Sorting Advantage:
- Increasing Order, Easy to Check for longest consecutive Subsequence
- Same Values will together, Easy to check for same adjacent elements



int count = 0;

if (nums[i] == nums[i-1] + 1)
	++count;

if (nums[i] == nums[i+1])
	continue; // skip, no change in count


if (nums[i] != nums[i-1] + 1)
	Reset count = 0
	Keep Track of Maximum
	More than 1 Consecutive Subset Exist


arr = [1 2 3 4 7 8 9 10 11]
OP: Max(4,5) = 5







CODE:

class Solution 
{
    public int longestConsecutive(int[] nums) 
    {
        int len = nums.length;
        if (len == 0)
            return 0;

        Arrays.sort(nums); // O(NlogN)
        int count = 0, curr_len = 1;
        int i = 0;

        for (i=1; i<len; i++)
        {
            // Duplicates -> skip, no change in count
            if (nums[i] == nums[i-1])
                continue;

            // Consecutive -> Increase by 1
            else if (nums[i] == nums[i-1] + 1)
                curr_len += 1;

            // Reset count = 0
            // Keep Track of Maximum
            // More than 1 Consecutive Subsequences Exist
            else
            {
                count = Math.max(count, curr_len);
                curr_len = 1;
            }     
        }

        return Math.max(count, curr_len);
    }
}



TC: O(NlogN)
SC: O(1)









(2) Optimised Solution: Set

Duplicates or No Duplicates: Same Answer


[1 2 2 3 3 4]
OP: 4


Set: [1 2 3 4]
OP: 4





Approach:

(1) For Each Value val in Array:
- Check for val-1 exist in set or not



Using Array: O(N) - Linear Search, Do for All Values - O(N^2)
Using Set: O(1)


- Iterate forward till you have consecutive values


(2) Keep count and max


[100,4,200,1,3,2]


100: 1
4: 1
200: 1
1: 4 (1,2,3,4) - MAX
3: 2 (3 4)
2: 3 (2 3 4)


OP: 4





CODE:



arr = [100,4,200,1,3,2]
set = (100,4,200,1,3,2)

4: curr_len = 1
Check if 4-1=3 exists in set- YES

3: curr_len = 2
Check if 3-1=2 exists in set- YES

2: curr_len = 3
Check if 2-1=1 exists in set- YES

1: curr_len = 4
Check if 1-1=0 exists in set - NO


TC: O(N)
SC: O(N)


# TC: O(N)
# SC : O(N) - Set

class Solution(object):
    def longestConsecutive(self, nums):
        s, maxLen = set(nums), 0

        for num in s: 
            # Go to min value and  then check for upto max consecutive values
            if num-1 in s: continue

            curr_len = 1 # curr_len, Length of LCS
            while num+curr_len in s: 
                curr_len += 1

            maxLen = max(maxLen, curr_len)    

        return maxLen


[100, 4, 200, 1, 3, 2]

100: 1
4: 1
200: 1
1: 4 (1 2 3 4) - MAX: OP
3: 2 (3 4)
2: 3 (2 3 4) 








-------> JAVA Version:


class Solution 
{
    public int longestConsecutive(int[] nums) 
    {
        if (nums == null || nums.length == 0)
            return 0;
        
        Set<Integer> set = new HashSet<>();
        
        for (int i: nums)
            set.add(i);
        
        int count = 0;
        for (int num: nums)
        {
            int left = num-1;
            int right = num+1;

            while(set.remove(left))
                left--;
            
            while(set.remove(right))
                right++;

            count = Math.max(count, right-left-1);

            if (set.isEmpty())
                return count;
        }

        return count;
    }
}



TC: O(N)
SC: O(N) - Set


