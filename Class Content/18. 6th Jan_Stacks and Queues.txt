Date : 6th Jan 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:


Stacks 
- Use Case- DONE
- Applications- DONE
- Code- DONE

Queues
- Applications- DONE
- Use Case- DONE
- Code- DONE

Questions
- Reverse Array/String- DONE
- Balanced Parentheses - Google/Flipkart- DONE
- Leetcode 921- 
- Next Greater Element- 
- Hashing, Sets and Maps

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".









---------> STACKS AND QUEUES


Stacks:
- Use Case
- Applications
- Code



Queues:
- Use Case
- Applications
- Code






- What (Use Case/Problem) : DONE
- Why (Applications) : DONE
- How (Coding/Implementation) : DONE





STACKS:

Use Case: 
Most Recently Used Element in O(1) Time


Most Recently Used Element = Top Most Element


LIFO Order: Last in First Out
			(Last Inserted, First Deleted)



Real Life Example:

Packet of Bread



OPEN:

___5___ : PICK : TOP
___4___
___3___
___2___
___1___

100 Breads below 1



Breads are placed one above another in a Stack Order


First Bread: Top of Packet
5 Breads: 1 to 5

5th Bread on Top - Open the Packet
- Access the 5th Bread First

To Access the Top Most Element (5th Bread)
-----> No Iterations

TC: O(1): Constant Time

Not Dependent upon Stack Size


N = 100
N = 10^9














------> Applications:



(1) Ctrl + Z: Undo
	Ctrl + Y: Redo


Real Life Example:

Type "devang" in Keyboard, Press Ctrl + Z and Ctrl + Y
- Only the last change is afftected



Insertion:

1
2
3
4
5 : RECENT

Undo: Last/Most Recent Operation is Reverted
Redo: Revert of Undo


STACK:

5 - TOP                          4 - TOP                5 - TOP
4 								 3                      4
3 Ctrl + Z (UNDO) 				 2 (Ctrl + Y)           3
2 	(POP)   					 1 	(REDO)	     		2
1 														1



Ans: 1 Stack + 1 Temp Variable

Multiple Undo and Redo: 2 Stacks


Use of Storing temp value after popping from Stack ------> RESTORE


Ctrl + Z;
stack.pop();


5: temp variable

Ctrl + Y;
stack.push(temp);










(2) Browser History/ Youtube History/ Streaming History:


Github: 6 AM
Medium: 6:15 AM
Linkedin: 6:30 AM


History:
(Reverse Chronological Order)

Linkedin
Medium
Github



- Stack





(3) Recursion:

Recursion Stack: O(N) - Auxiliary Memory


(4) Graphs:

DFS - Stacks
BFS - Queues








CODE:



JAVA:

import java.io.*;
import java.util.*;


public class Main 
{
    public static void main(String[] args) 
    {
        Stack<Integer> st = new Stack<Integer>();
        System.out.println(st.isEmpty()); // true
        
        st.push(1); // insert
        st.push(2);
        st.push(3); // top
        
        System.out.println("Stack: " + st); // [1 2 3: top]
        System.out.println("Top: " + st.peek()); // 3
        System.out.println("Size: " + st.size()); // 3
        
        System.out.println("Delete: " + st.pop()); // delete:3
        
        System.out.println("Stack: " + st); // [1 2: top]
        System.out.println("Top: " + st.peek()); // 2
        System.out.println("Size: " + st.size()); // 2
        
        System.out.println(st.isEmpty()); // false
    }
}



OP:

true
Stack: [1, 2, 3]
Top: 3
Size: 3
Delete: 3
Stack: [1, 2]
Top: 2
Size: 2
false


C++:


stack<data_type> name;


stack<int> s;
s.insert(1);

s.pop();
s.top();
s.empty();




Py:

List: [] - Arrays, Stacks, Queues












Interview Questions:

Custom Stack:

class Stack
{
	int capacity = 20;
	int[] arr = new int[capacity];

	Stack(int val)
	{
		this.val = val;
	}

	push(int x);
	pop();
	peek();
	isEmpty();

	getMax();
	getMin();
}



Task: Complete Interface in O(1) Time

Ques: Min-Stack and Max-Stack in Leetcode

Ans: O(1) Time

Leetcode:

https://leetcode.com/problems/max-stack/
https://leetcode.com/problems/min-stack/





























ArrayList<Integer> al = new ArrayList<Integer>(); ----- DYNAMIC


Size: 0

al.insert(1);
al.insert(2);
al.insert(3);

Size: 3

Memory: 12 Bytes



int[] arr = new int[10]; ---- STATIC

arr = {0,1,2};

Memory: 40 Bytes





ArrayList:

Default Size: 256

Before JDK 1.6:

After 256th Element in Inserted,
Size: 2x

After JDK 1.6
After 256th Element in Inserted,
Size: 1.5x


Internal Implementation:
https://www.javatpoint.com/internal-working-of-arraylist-in-java









--------> Complexity of Operations

Insertion: TOP 
Deletion: TOP




(1) Push - Add Item

Stack == Full
"Overflow"

top == length - 1
size == capacity


TC: O(1)




(2) Pop - Delete Item

Stack == Empty
"Underflow"

TC: O(1)


(3) Peek/ Top - Get Top Element

TC: O(1)


(4) stack.isEmpty() - true/false
- Empty or Not

boolean isEmpty()
{
	return (stack.peek() == null);
}


TC: O(1)









Application Questions:



1 2 3 ------> STACK -------> 3 2 1


Order of Values in Stack/Output = Opposite of Order of Insertion




Reverse a String/Array:

(1) Inbuilt Reverse Function
TC: O(N), SC: O(1)

(2) Creating Extra Array/String, Traverse from R to L
TC: O(N), SC: O(N)

(3) Two Pointers and Swap
TC: O(N/2), SC: O(1)

(4) Travel Half and Swap
TC: O(N/2), SC: O(1)

(5) Using Stacks:
TC: O(N), SC: O(N)



"abc" ----> "cba"











- What (Use Case/Problem) : DONE
- Why (Applications) : DONE
- How (Coding/Implementation) : DONE






-------> QUEUES:

Use Case:
Least Recently Used Element in O(1) Time


FIFO : First In, First Out
	   (First Inserted == First Deleted)


FCFS: First Come First Serve


Real Life Example:


			New R............F: Bank Counter

			Insertion: Rear                Deletion: Front          
			(ENQUEUE)                       (DEQUEUE)



F............R: First In First Out / FCFS


Dequeue: Operation: Deletion
Deque: Doubly Ended Queue: Data Structure





-------> Complexity of Operations:

Insertion: Rear 
Deletion: Front




(1) Enqueue: Insertion
- At Rear


If Queue == Full
"Overflow"


TC: O(1)

(2) Dequeue: Deletion
- At Front


If Queue == Empty 
"Underflow"

TC: O(1)


(3) Front: Get Front Element: O(1)
(4) Rear: Get Rear Element: O(1)

(5) queue.isEmpty() - true/false
- Empty or Not


boolean isEmpty()
{
	return (q.front() == null);
}

TC: O(1)














-----> Applications:

(1) LRU Cache: L1/L2/L3

[F:1 2 3 4 5: R]


(2) OS:

CPU Scheduling:


CPU: Threads for Tasks ------> Queues (FCFS/FIFO)

Why Queues, Not Stacks?



Login to your PC:

4 Operations: [Chrome, VLC, Spotify, VS Code]

Queue: [Chrome, VLC, Spotify, VS Code]

Stacks: [VS Code, Spotify, VLC, Chrome]

- Queue is Used


MS Word: ---> Process

Bold: T-1
Italic: T-2
Color: T-3



Chrome: ---> Process

Tab-1: Google.com: T-1
Tab-2: Youtube: T-2



(3) IO Buffers

Buffer Size and Time for Submission

Time ----> Rank
Less Time -------> Less Rank


time_stamp: Stored in Queue (Along with metadata)

Based upon time_stamp: Rank is Generated

1st Submission: Rank 1
2nd Submission: Rank 2
...............


Submitted first ----> Rank 1 ----> Queue

Submitted last ----> Rank 1 ----> Stack










-------> CODE:

JAVA:


import java.io.*;
import java.util.*;


public class Main 
{
    public static void main(String[] args) 
    {
        Queue<Integer> queue = new LinkedList<Integer>();
        System.out.println("Empty: " + queue.isEmpty()); // true
        
        queue.add(1); // insert
        queue.add(2);
        queue.add(3); // rear
        
        System.out.println("Queue: " + queue); // [F:1 2 3:R]
        System.out.println("Front: " + queue.element()); // 1: front
        System.out.println("Size: " + queue.size()); // 3: size

        System.out.println("Delete: " + queue.remove()); //delete: 1
        
        System.out.println("Queue: " + queue); // [F:2 3:R]
        System.out.println("Front: " + queue.element()); // 2: front
        System.out.println("Size: " + queue.size()); // 2: size
        
        System.out.println("Empty: " + queue.isEmpty()); // false
    }
}



OP:

Empty: true
Queue: [1, 2, 3]
Front: 1
Size: 3
Delete: 1
Queue: [2, 3]
Front: 2
Size: 2
Empty: false




C++:


queue<data_type> queue;


Eg:

queue<int> q;
q.insert(1);
q.insert(2);
q.insert(3);

q.front();
q.erase();


Py:

List: [] - Arrays, Stacks, Queues














Q-2: [LC-20] Balanced Parentheses - [Google/Flipkart]
https://leetcode.com/problems/valid-parentheses/


Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', 
determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.





"{[()]}": Balanced

"{[(]}": Not Balanced

"{[(])}": Not Balanced




Edge Cases:

(1) "" -----> Valid

(2) if (s.length() % 2 != 0)
	return false;






    public boolean isValid(String s) 
    {

	}




Solution:



(1) Open brackets must be closed by the same type of brackets.
Sol: if/else condition OR Switch

(2) Open brackets must be closed in the correct order.

Order of Opening == Reverse of Order of Closing - Balanced, Else Not balanced

Sol: STACK



"{[()]}": Balanced

Opening: C, S, R
Closing: R, S, C





Approach:


STACK:


Iterate Over String:

(1) Opening Brackets - Push to Stack
(2) Closing Brackets - Pop from Stack
AND
Compare with Closing Bracket
(Popped Opening Bracket Compared against the Closing Bracket)

If its same type - continue
else, return false


Complete String Traversed, No Brackets left in Stack: return true
else return false



DRY RUN:

A = "{[()]}"

STACK:

( - TOP          [ - TOP       { - TOP       Empty
[                {
{


pop: ( == ): TRUE - continue

pop: [ == ]: TRUE - continue

pop: { == }: TRUE - continue

Complete String Traversed

OP: true






B = "({[}])"

STACK:

[ - TOP          { - TOP
{ 				 (
(


pop: [ == } : False

OP: false








str = "({[}])............................"



C = "}.............."
"NOT BALANCED"





CODE:



class Solution {
    public boolean isValid(String s) 
    {
        // Edge Cases:

        // Empty Case - return true
        if (s == "")
            return true;

        // Odd length - return false
        if (s.length()%2!=0)
            return false;
        
        // First char is closing- return false
        if (s.charAt(0) == ')' || s.charAt(0) == ']' || s.charAt(0) == '}')
            return false;


        Stack<Character> stack = new Stack<Character>();
        int i = 0;

        for (i=0; i<s.length(); i++)
        {
            char c = s.charAt(i);

            if (c == '[' || c == '{' || c == '(')
            {
                stack.push(c);
                continue;
            }

            // If Stack is Empty, return false
            if (stack.isEmpty())
                return false;
        
            char check;
            switch(c)
            {
                case ')':
                    check = stack.peek();
                    if (check == '{' || check == '[')
                        return false;
                    stack.pop();
                    break;
                
                case '}':
                    check = stack.peek();
                    if (check == '(' || check == '[')
                        return false;
                    stack.pop();
                    break;
                
                case ']':
                    check = stack.peek();
                    if (check == '{' || check == '(')
                        return false;
                    stack.pop();
                    break; 
            }
        }

        return stack.isEmpty(); // Complete String Traversed and Stack is Empty
    }
}



TC: O(N)
SC: O(N) - Stack








HW:
[LC-921] - Google



