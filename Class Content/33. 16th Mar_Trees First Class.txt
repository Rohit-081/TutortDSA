Date : 16th March 2024
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:

- Trees
- What (Use Case): DONE
- Why (Applications): DONE
- How (Coding/Implementation): DONE
- Traversals: DONE

- Binary Search Trees
- Interview Questions on BT and BST: WIP

Trees- Binary Trees

https://leetcode.com/problems/minimum-depth-of-binary-tree/: DONE
https://leetcode.com/problems/maximum-depth-of-n-ary-tree/: 
https://leetcode.com/problems/balanced-binary-tree/: 
LC - Premium : https://leetcode.com/problems/binary-tree-upside-down/ 


Trees- Binary Search Trees

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree - IMP
https://leetcode.com/problems/minimum-absolute-difference-in-bst: DONE
https://leetcode.com/problems/search-in-a-binary-search-tree: DONE
https://leetcode.com/problems/range-sum-of-bst: DONE

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".








-------> How (Coding/Implementation): 

(1) Linked List
- Structure of Node of a Linked List

JAVA:


class Node
{
	int data;
	Node next = null; // self-referntial object	
}


C++:

struct Node
{
	int data;
	Node* next = NULL; // self-referntial structure	
}


Py:

class Node:
	def __init__(self, data):
		self.data = data
		self.next = None // self-referntial object	 




class A
{
	A obj2; -----> Self - Referential Object
}


A obj;




Analogy:

(1) Blueprint of Compartment
(2) Create Compartment
(3) Combine Compartment Together -----> TRAIN


(1) Blueprint/Structure of Node
(2) Create Nodes
(3) Combine Nodes Together -----> LINKED LIST





Structure of Node of a Linked List:

{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}


{
	data: int
	next: NULL
}


















(2) Trees
- Structure of Node of a Tree

JAVA:

class Node
{
	int data;
	Node left = null; // self-referential object	
	Node right = null; // self-referential object
}


C++:

struct Node
{
	int data;
	Node* left = NULL; // self-referential structure	
	Node* right = NULL; // self-referential structure	
}


Py:

class Node:
	def __init__(self, data):
		self.data = data
		self.left = None // self-referential object	 
		self.right = None // self-referential object	 



// N - Ary Tree
struct Node
{
	int data;
	vector<Node*> children(N, NULL); // self-referential object	
}











------> Complete Code:

// Structure of Node of a Tree
class Node
{
	int data; 
	Node left = null; // self-referential object	
	Node right = null; // self-referential object
	Node (int data)
	{
		this.data = data;
	}
}


class Main
{
	public static void main(String[] args)
	{
		Node root = new Node(1);

					 1
				null   null	

		root.left = new Node(2);

					 1
				2       null	
			 null null	


		root.right = new Node(3);

					 1
				2       3	
			 null null	null null


		root.left.right = new Node(4);

					 1
				2       3	
			 null 4	  null null

	}
}




root.left OR root.right: Java and Python


-> : C++
.: Java or Py





Input from Array:

Parent: ith Index
Children:
(2*i+1) index: Left Children
(2*i+2) index: Right Children





















---------> Traversals:

Hierarchical DS:
More than One Logical Way of Traversal



2 Types of Traversals:

(1) DFS (Depth First Search)
- PreOrder
- InOrder
- PostOrder



(2) BFS (Breadth First Search)
- Level Order Traversal (LOT)








-------> DFS Traversals:

- InOrder (Left -> Root -> Right)
- PreOrder (Root -> Left -> Right)
- PostOrder (Left -> Right -> Root)


		A
	  B   C	


InOrder: B A C
PreOrder: A B C
PostOrder: B C A




		1                         1
	2       3	------> [4 2 5]        3 ---------> [4 2 5 1 3]
  4  5


InOrder: [4 2 5 1 3]
PreOrder: [1 2 4 5 3]
PostOrder: [4 5 2 3 1]






------> BFS Traversals:


Level Order Traversal:


		1                         
	2       3
  4   5


1
2 3
4 5


OP: [1 2 3 4 5]









CODE:

void inOrder(Node root)
{
	if (root == null)
		return;

	// Left - Root - Right
	inOrder(root.left); // Left
	System.out.print(root.data + " "); // Root
	inOrder(root.right); // Right
}


void preOrder(Node root)
{
	if (root == null)
		return;

	// Root - Left - Right
	System.out.print(root.data + " "); // Root
	preOrder(root.left); // Left
	preOrder(root.right); // Right
}


void postOrder(Node root)
{
	if (root == null)
		return;

	//  Left - Right- Root
	postOrder(root.left); // Left
	postOrder(root.right); // Right
	System.out.print(root.data + " "); // Root
}


TC: O(N)
SC: O(N) - Recursion Stack








Interview Questions:

Ques, Company, IP, OP

Function

Code, TC, SC - 30 sec


Structure of Tree:

Node
{
	int data;
	Node left, right;
}








Q-1: [Amazon] Height/Depth of a Binary Tree



IP:


				1            -------- 1
			2       3	     -------- 2
				  4    5     -------- 3
				 6           -------- 4

OP: 4




IP:

			1

OP: 1



IP:
	Empty Tree

OP: 0






[LC-104] Maximum Depth of Binary Tree
https://leetcode.com/problems/maximum-depth-of-binary-tree/description/


Given the root of a binary tree, return its maximum depth.

A binary trees maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 
Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3


Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100



    public int maxDepth(TreeNode root) 
    {

    }




Solution:



Approach:

Binary Tree: 2 Nodes (Left and Right Subtrees)

For Maximum Depth/Height of Tree:
= Maximum of Left and Right Subtree Height/Depth + 1 (Root Node)



Formula:
height = 1 + max(root.left, root.right);



IP:


			1
		2      3	
			 4   5
			6 



OP: 4




DRY RUN:

			     1 - 4 - ANS
		2(1)          3	(3)
			  4 (2)     5 (1)
			6 (1)


height = 1 + max(root.left, root.right);


For 4 = 1  + max(1,0) = 2
For 2 = 1 + max(0,0) = 1
For 3 = 1 + max(2,1) = 3
For 1 - Root = 1 + max(1,3) = 4





CODE:


class Solution 
{
    public int maxDepth(TreeNode root) 
    {
    if (root == null)
        return 0;
        
    int left_height = maxDepth(root.left); // Left Subtree

    int right_height = maxDepth(root.right); // Right Subtree

    return 1 + Math.max(left_height, right_height);
    }
}

TC: O(N)
SC: O(N) - Recursion














Q-2: [Microsoft] Check if Two Trees are Mirror or Not


			1                   |            1
		2      3				|        3        2
				 4  			|      4


OP:
true




			1                   |            1
		2      3				|        2        3
				 4  			|                   4


OP:
false


Edge Cases:

A: Empty
B: Empty


OP:
true



A: Empty
B: Not Empty

OP: 
false



boolean areMirror(Node root1, Node root2)
{

}



Solution:


(A) Conditions:

- root == same
- left subtree of first = right subtree of second
- right subtree of first = left subtree of second

(B) Code:


boolean areMirror(Node root1, Node root2)
{
	// Both Empty - return true
	if (root1 == null && root2 == null)
		return true;

	// Either One is Empty, Other Not Empty, return false
	if (root1 == null || root2 == null)
		return false;

	// Both Non-Empty, Check for 3 Conditions
	return (root1.data == root2.data) && areMirror(root1.left, root2.right) && areMirror(root1.right, root2.left);
}


TC: O(M+N)
SC: O(M+N)





Approach - 2: Do InOrder Traversal and Check if they are reverse or not


			1                   |            1
		2      3				|        3        2
				 4  			|      4


OP:
true



InOrder for Tree-1: [2 1 3 4]

InOrder for Tree-2: [4 3 1 2]

InOrder for Tree-1: Reverse of InOrder for Tree-2




TC: O(M+N)
SC: O(M+N)













Q-3: [LC-101] Symmetric Tree [Microsoft]
https://leetcode.com/problems/symmetric-tree/description/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true


Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?



    public boolean isSymmetric(TreeNode root) 
    {

    }


Solution:


// TC - O(N)
// SC - O(N)

class Solution {
    public boolean isSymmetric(TreeNode root) 
    {
        if (root == null)
            return true;
        
        return areMirror(root.left, root.right);
        
    }
    
    public boolean areMirror(TreeNode a, TreeNode b)
    {
	// Both Empty - true
	if (a == null && b==null)
		return true;

	// Both Empty - true
	if (a == null || b==null)
		return false;

	// Both Non-Empty - 3 Conditions
	return (a.val == b.val) && areMirror(a.left, b.right)  && areMirror(a.right, b.left);
    }

}

















Q-4: [Adobe] Check if Two Trees are Identical or Not


			1                   |            1
		2      3				|        2        3
				 4  			|                   4


OP:
true



			1                   |            1
		2      3				|        3        2
				 4  			|      4


OP:
false



Edge Cases:

A: Empty
B: Empty


OP:
true



A: Empty
B: Not Empty

OP: 
false



boolean areIdentical(Node root1, Node root2)
{

}




Solution:












HW:
- Check if Two Trees are Identical or Not
- Sum of All Nodes in a Binary Tree
















