Date : 26th Nov 2022
Mentor: DEVANG SHARMA
Batch: Oct Batch (DSA) - Tutort Academy

Agenda:
- Arrays- DONE
- Binary Search and Time Complexity-DONE
- Questions- DONE
- Prefix Sum - DONE

Questions:
- Two Sum with all approaches and a basic understanding of hashmap: DONE
- Given an array replace every element with a greater element on the right side: DONE
(not including the current element) 
- Given an array replace every element with a greater element on the left side: DONE
(not including the current element) 
- Majority Element:  https://leetcode.com/problems/majority-element: DONE
- [Google] Wiggle Sort: https://www.lintcode.com/problem/508/description - DONE
- Decompress RLE: 
- Kids With the Greatest Number of Candies: https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/


TODO:
- Product of Array Except Self
- Intersection of Two Arrays: https://leetcode.com/problems/intersection-of-two-arrays/
- Rotate Array: https://leetcode.com/problems/rotate-array/

"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".




Q-5: [Google, Microsoft, Amazon] [LC-280] Wiggle Sort - Premium
https://leetcode.com/problems/wiggle-sort/description/

Given an integer array nums, 
reorder it such that nums[0] <= nums[1] >= nums[2] <= nums[3]....

You may assume the input array always has a valid answer.

 

Example 1:

Input: nums = [3,5,2,1,6,4]
Output: [3,5,1,6,2,4]
Explanation: [1,6,2,5,3,4] is also accepted.

Example 2:

Input: nums = [6,6,5,6,3,8]
Output: [6,6,5,6,3,8]
 

Constraints:

1 <= nums.length <= 5 * 104
0 <= nums[i] <= 104
It is guaranteed that there will be an answer for the given input nums.
 

Follow up: Could you solve the problem in O(n) time complexity?






Input: nums = [3,5,2,1,6,4]
Output: [3,5,1,6,2,4]
Explanation: [1,6,2,5,3,4] is also accepted.

3 <= 5 >= 2 !<=1 : NOT WIGGLE


3 <= 5 >= 1 <= 6 >= 2 <= 4: WIGGLE
1 <= 6 >= 2 <= 5 >= 3 <= 4: WIGGLE






	nums[0] <= nums[1] >= nums[2] <= nums[3]

Index:   0.         1.        2.       3



HINT:
Pattern: Number in Odd Index: PEAK



    void wiggleSort(vector<int>& nums) {
        
    }





[LintCode-508] Wiggle Sort
https://www.lintcode.com/problem/508/description


Given an unsorted array nums, reorder it in-place such that

nums[0] <= nums[1] >= nums[2] <= nums[3]....
There may have multiple answers for a question, you only need to consider one of the possibilities.

Please sort the array in place and do not define additional arrays.

Example
Example 1:

Input: [3, 5, 2, 1, 6, 4]
Output: [1, 6, 2, 5, 3, 4]
Explanation: This question may have multiple answers, and [2, 6, 1, 5, 3, 4] is also ok.


Example 2:

Input: [1, 2, 3, 4]
Output: [1, 4, 2, 3]


    public void wiggleSort(int[] nums) 
    {

    }


Solution:



(1) Sorting:

Intuition Behind Sorting:

Pattern After Sorting: <= <= <= <=
Need Pattern: <= >= <= >=

Odd Index: Higher -> Swapping


- Sort the Array
- Increase Index by 2
- Swap the Values



[............Incre]
Odd Index: Higher -> Swapping



Edge Cases:

(1) arr.length == 1
No Wiggle

[1],[2]

(2) arr.length == 2

[2 1] -> [1 2]

if (arr[0] > arr[1]), swap
else ----> No Swap






CODE:


    public void wiggleSort(int[] nums) 
    {
        int n = nums.length;

        if (n < 2)
            return;

        Arrays.sort(nums);
        int i = 1; // Odd Index Swapping

        for (i=1; i<n-1; i+=2)
        {
            // Swap the values: Odd Index should be higher: Swapping
            int temp = nums[i];
            nums[i] = nums[i+1];
            nums[i+1] = temp;
        }
    }


TC: O(NlogN)
SC: O(1)










(2) Optimised Solution: Without Sorting


Pattern: Number in Odd Index: PEAK



If Index is Odd: arr[i] >= arr[i-1], else swap
				 ODD >= EVEN


If Index is Even: arr[i] <= arr[i-1], else swap
				 EVEN <= ODD	
	


DRY RUN:


Input: [1, 2, 3, 4]
Output: [1, 4, 2, 3]


We need:   EVEN <= ODD >= EVEN


		1 2 3 4 - NOT WIGGLE
Index:  0 1 2 3


i = 0, Index: EVEN
if (nums[0] > nums[1]). ---> 1 > 2: false
-> Not Do Anything

Ans = [1 _ _ _]


i = 1, Index: ODD
if (nums[1] < nums[2]) ----> 2 < 3: true
	swap(nums, 1, 2) ----> 2 <-> 3 SWAP

nums = [1 3 2 4]


i = 2, Index: EVEN
if (nums[2] > nums[3]) ----> 2 > 4: false
-> Not Do Anything


ANS = nums = [1 3 2 4] ------ WIGGLE


CODE:


    public void wiggleSort(int[] nums) 
    {
        if (nums.length < 2)
            return;

        for (int i=0; i<nums.length-1; i++)
        {
            // If Index is Even
            if (i %2 == 0)
            {
                if (nums[i] > nums[i+1]) // Even Index Val > Odd Index Value
                {
                    swap(nums, i, i+1);
                }
            }

            else // If Index is Odd
            {
                if (nums[i] < nums[i+1]) // Odd Index Val < Even Index Val
                {
                    swap(nums, i, i+1);
                }
            }

        }

        return;
    }


    public void swap(int[] nums, int i, int j)
    {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }




TC: O(N)
SC: O(1)




for (i=0; i<n; i++)
	Deal with i

for (i=0; i<n-1; i++)
	Deal with i+1

for (i=0; i<n-2; i++)
	Deal with i+2

for (i=0; i<n-k; i++)
	Deal with i+k

















Q-6: [LC-1431] Kids With the Greatest Number of Candies
https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/



There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.

Note that multiple kids can have the greatest number of candies.

 

Example 1:

Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.

Example 2:

Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.

Example 3:

Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]
 

Constraints:

n == candies.length
2 <= n <= 100
1 <= candies[i] <= 100
1 <= extraCandies <= 50



Understanding:

1st: 2 + 3 = 5
[5 3 5 1 3]: MAX -> true

2nd: 3 + 3 = 6
[2 6 5 1 3]: MAX -> true

3rd: 5 + 3 = 8
[2 3 8 1 3]: MAX -> true

4th: 1 + 3 = 4
[2 3 5 4 3]: NOT MAX -> false

5th: 3 + 3 = 6
[2 3 5 1 6]: MAX -> true

Final OP:
[true,true,true,false,true] 






Solution:



(1) Find Max in Array
(2) For Each Kid,
		arr[i] + extraCandies >= max
	return true
else
	return false



TC: O(N)
SC: O(1)




CODE:



// TC: O(N)
// SC: O(1)

class Solution 
{
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies)     {
        int len = candies.length;
        List<Boolean> ans = new ArrayList<Boolean>(len);
        
        int max = 0; // 1 <= candies[i] <= 100
        // Intialising with INT_MIN is also fine
        
        for (int candy: candies)
        {
            max = Math.max(candy, max);
        }
        
        for (int candy: candies)
        {
            ans.add(candy + extraCandies >= max);
        }
    
        return ans;
    }
}



















Q-7: [Amazon] [LC-1313] Decompress RLE
https://leetcode.com/problems/decompress-run-length-encoded-list/



RLE: Run Length Encoding



char : freq

aabbbc: a2b3c1: ENCODING

a2b3c1: aabbbc: DECODING




YT:
_ _ _ _ 




We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  
For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].
The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].
At the end the concatenation [2] + [4,4,4] is [2,4,4,4].

Example 2:

Input: nums = [1,1,2,3]
Output: [1,3,3]
 

Constraints:

2 <= nums.length <= 100
nums.length % 2 == 0
1 <= nums[i] <= 100





Understanding:

nums = [1 2 3 4]

[freq, val]


[1,2]
freq = 1
val = 2

OP: [2]


[3,4]
freq = 3
val = 4

OP: [4 4 4]


Final OP: [2 4 4 4]







Solution:

Even Index: Freq
Odd Index: Val


i=, i+=2: EVEN
arr[i]: freq
arr[i+1]: val


while (freq-->0)
{
	ans.add(val);
}

Push val - freq number of times.





CODE:


// TC: O(N/2 * max(freq))
// SC: O(1)

class Solution {
    public int[] decompressRLElist(int[] nums) 
    {
        int size = 0;
        int i = 0, j = 0;
        int n = nums.length;

        for (i=0; i<n; i+=2)
            size += nums[i];

        int[] res = new int[size];

        int idx = 0;
        for (i=0; i<n; i+=2)
        {
            for (j=0; j<nums[i]; j++)
                res[idx++] = nums[i+1];
        }

        return res;
    }
}


Optimised: Arrays.fill(s_idx, e_idx, number of times)





















VVVVVVI
Q-8: [LC-53] Maximum Subarray Sum -[Microsoft, Goldman, DE Shaw, Cisco]
https://leetcode.com/problems/maximum-subarray/


Given an integer array nums, find the subarray with the largest sum, and return its sum.


Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104




    public int maxSubArray(int[] nums) 
    {

    }


Solution:



(1) Brute Force


Find Sum of All Subarrays, then find max
All Subarrays - Two Nested Loops
Calculating Sum - O(N)

TC : O(N^3)
SC : O(1)




(2) Optimised Solution: 



-----> KADANE Algo


- Sliding Window

(1) Start Traversing your array
(2) For Each Element -> Keep: currSum and prevSum
(3) Find Max of All sum


Edge Case:

curr_sum < 0
Reset curr_sum = 0



CODE:





// TC: O(N)
// SC: O(1)


DRY RUN:

Input: [5,4,-1,7,8]
OP: 23

class Solution 
{
    public int maxSubArray(int[] nums) 
    {
        int n = nums.length;
        int maxSum = Integer.MIN_VALUE; // -2^31
        int currSum = 0;

        int i = 0;
        for (i=0; i<n; i++)
        {
            currSum += nums[i]; // currSum = 5, currSum = 9, currSum = 8, currSum = 15, currSum = 23
            maxSum = Math.max(currSum, maxSum); // maxSum = 5, maxSum = 9, maxSum = 9, maxSum = 15, maxSum = 23

            if (currSum < 0)
                currSum = 0;
        }

        return maxSum; // 23 - ANS
    }
}


TC: O(N)
SC: O(1)







HW:

- Product of Array Except Self
















