Date : 25th Nov 2023
Mentor: DEVANG SHARMA
Batch: OCT Batch (DSA) - Tutort Academy

Agenda:

- Arrays: DONE
- Binary Search and Time Complexity: DONE
- Advanced Questions on Array - DONE
- Two Pointer- DONE
- Question- DONE
- Two Sum: All Solutions: DONE

- Prefix Sum Array-DONE 
- Questions - DONE
- Majority Element https://leetcode.com/problems/majority-element: DONE

TODO:
- Product of Array Except Self
- Wiggle Sort: https://www.lintcode.com/problem/508/description
- Intersection of Two Arrays: https://leetcode.com/problems/intersection-of-two-arrays/


"Please Type 'Hi' in the Chat Box if you have joined and Can See this Screen".



- Linear Search: DONE
- Binary Search: DONE
- Two Pointers: DONE
- Prefix Sum: DONE







--------> Subarray vs Subsequence vs Subsets

arr = [5 2 1 4 3 6]

Subarray = Substrings (STRINGS)

--------> Subarrays:

- Values MUST be CONTIGUOUS
- Values MUST be IN ORDER (Same Order as in Original Array)


Eg:

[5 2 1]: YES
[1 4 3 6]: YES
[1 4 6]: NO
[1 2 5]: NO
[5 2 1 4 3 6]: YES
[5],[2]: YES





Formula for Calculating Number of Subarrays for an Array of Size N:

arr = [5 2 1 4 3 6]
size = 6



Subarrays starting from 5, i = 0, Total = 6 (N-i)

[5]
[5 2]
[5 2 1]
[5 2 1 4]
[5 2 1 4 3]
[5 2 1 4 3 6]


Subarrays starting from 2, i = 1, Total = 5 (N-i)

[2]
[2 1]
[2 1 4]
[2 1 4 3]
[2 1 4 3 6]



Total Number of Subarrays in an Array
= 6 + 5 + 4 + 3 + 2 + 1
= 21

Total Number of Subarrays in an Array of Size N:
= N + (N-1) + (N-2) + ............... + 1
= 1 + 2 + ......... + N-1 + N
= N * (N+1)/2




CODE:

arr = [5 2 1 4 3 6]


for (i=0; i<n; i++) // 5
{
	for (j=i; j<n; j++)
		cout<<arr[j]<<" "; // [5 2 1 4 3 6]
}

TC: O(N^2)
SC: O(1)










--------> Subsequences:

- Values NEED NOT be CONTIGUOUS
- Values MUST be IN ORDER (Same Order as in Original Array)

arr = [5 2 1 4 3 6]


Eg:

[5 2 1]: YES
[1 4 3 6]: YES
[1 4 6]: YES
[1 2 5]: NO
[5 2 1 4 3 6]: YES
[5],[2]: YES










--------> Subsets:

arr = [5 2 1 4 3 6]

- ANY POSSIBLE COMBINATION from Elements of Array
- Values NEED NOT be CONTIGUOUS
- Values NEED NOT be IN ORDER (Same Order as in Original Array)

Power Set = 2^N



Eg:

[5 2 1]: YES
[1 4 3 6]: YES
[1 4 6]: YES
[1 2 5]: YES
[5 2 1 4 3 6]: YES
[5],[2]: YES

[1 2 7]: NO



Subsets
	- Subsequences	
		- Subarrays


Syllogism:

All Subarrays are Subsequences
All Subsequences are Subsets






Q-2: [CISCO] Find if there is any subarray with sum = 0
[Google] Find if there is any subarray with sum = K


Given an array of positive and negative integers.
Find if there is any subarray with sum = 0

arr = [4 2 -3 1 6]
OP: true


[2 -3 1]
sum = 0



boolean subarrayWithSumZero(int[] arr, int n)
{

}


Approaches:


Sort + Sliding Window
NlogN   N


Order is Important:
NEVER do Sorting


Eg:

Subarrays
Subsequences
Kth Largest
Kth Smallest
Next Greater
Next Smaller
Prev Greater
Prev Smaller


Solution:

(1) Brute Force : Two Nested Loops

Find All Subarrays, 
Check if sum == 0

Number of All Subarrays = N * (N+1)/2

TC: O(N^3)
SC: O(1)





(2) Optimised Solution: Prefix Sum

arr = [4 2 -3 1 6]
OP: true


prefixSum[i] = arr[0] + arr[1] + ............ + arr[i]

prefixSum[i] = 0
arr[0] + arr[1] + ............ + arr[i] = 0
arr[0......i] : Subarray with sum = 0

Subarray Starting from 0 Index with Sum = 0


arr = [-1 2 -1 5 6]
prefixSum = [-1 1 0 5 11]


arr = [4 2 -3 1 6]
prefixSum = [4 6 3 4 10]






.........i............j................

prefixSum[j] = prefixSum[i] + arr[i....j]

prefixSum[i] = Sum upto ith Index Values = arr[0......i] = K

prefixSum[j] = Sum upto jth Index Values = arr[0......j] = K


Sum of Values from i to j = K - K = 0

arr[i......j]: Subarray


Subarray Starting from Random Index (Not 0) with Sum = 0






Example-1: Subarray with sum = 0 Starting from Non-Zero Index

arr = [4 2 -3 1 6]

Subarray: [2 -3 1]: Starting from 1 Index

prefixSum = [4 6 3 4 10]
4 is REPEATED




Example-2: Subarray with sum = 0 Starting from 0 Index


arr = [-1 2 -1 5 6]

Subarray: [-1 2 -1]: Starting from 0 Index


prefixSum = [-1 1 0 5 11]
0 contained in the prefixSum






Approach:

Calculate prefixSumArray
if prefixSum == 0 OR prefixSum is REPEATED
	return true
else
	return false





CODE:


boolean subarrayWithSumZero(int[] arr, int n)
{
	HashSet<Integer> set = new HashSet<Integer>();
	int prefixSum = 0;

	for (int i =0; i<n; i++)
	{
		prefixSum += arr[i];

		if (prefixSum == 0 || set.contains(prefixSum))
			return true;

		set.add(prefixSum);
	}

	return false;
}

TC: O(N)
SC: O(N)

















Q-4: [LC-169] Majority Element 
https://leetcode.com/problems/majority-element

Given an array nums of size n, return the majority element.

The majority element is the element that appears "more than ⌊n / 2⌋ times". 
You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?




Understanding:

[1 1 1 1 2 3 4 5]
Majority Element = ?

- INVALID TEST CASE

N = 8
N/2 = 4

Majority Element: freq > N/2

> N/2 : Correct
>= N/2: Incorrect


    public int majorityElement(int[] nums) 
    {


	}


Expectation:

TC: O(N)
SC: O(1)

Solution:



(1) Brute Force: Check freq > N/2, TC: O(N^2)
(2) Map: freq > N/2: TC: O(N)
(3) Sort and Check the value at arr[n/2]: TC: O(NlogN)
(4) Partial Sorting
(5) Bayer Moore Algo




(1) Brute Force:


public int majorityElement(int[] arr) 
{
int freq = 0;
for (i=0; i<n; i++)
{
	freq = 1;
	for (j=i+1; j<n; j++)
	{
		if (arr[i] == arr[j])
			++freq;
	}

	if (freq > n/2)
		return arr[i];
}
}

TC: O(N^2)
SC: O(1)



if freq = 0, j = i
if freq = 1, j = i+1








(2) Map

Element: Frequency
Frequency > N/2, Ans = Element

TC: O(N)
SC: O(N)



CODE:

    int majorityElement(vector<int>& nums) 
    {
    	unordered_map<int, int> counter;

    	for (i=0; i<n; i++)
    		counter[nums[i]]++;

    	for (auto it: counter)
    		if (it.second > n/2)
    			return it.first;
    }




    public int majorityElement(int[] nums) 
    {
    	HashMap<Integer, Integer> map = new HashMap<>();

    	for (int val: nums)
    	{
    		if (map.containsKey(val))
    			map.put(val, map.get(val) + 1)

    		else
    			map.put(val, 1);

    		if (map.get(val) > n/2)
    			return val;
    	}
	}






(3) Sorting:


Input: nums = [2,2,1,1,1,2,2]
Output: 2


After Sorting:
nums = [1 1 1 2 2 2 2]

TRICK:
After Sorting, At Index N/2: Majority Element


Valid: Freq of Majority Element > N/2




    public int majorityElement(int[] nums) 
    {
    	Arrays.sort(nums);
    	return nums[nums.len/2];
    }

TC: O(NlogN)
SC: O(1)




(4) Partial Sorting:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


After Complete Sorting:
nums = [1 1 1 2 2 2 2]



TRICK:

After Complete/Partial Sorting, at Index N/2: Majority Element

Valid: Freq of Majority Element > N/2



TC: O(N/2 * (log N/2))







(5) Optimised - Bayer Moore Algo
https://www.cs.utexas.edu/~moore/best-ideas/mjrty/index.html


We will sweep down the sequence starting at the pointer position shown above.

As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0.

When we move the pointer forward over an element e:

If the counter is 0, we set the current candidate to e and we set the counter to 1.
If the counter is not 0, we increment or decrement the counter according to whether e is the current candidate.
When we are done, the current candidate is the majority element, if there is a majority.







TRICK:


(1) if count == 0
	count++


Two Cases:
(A) Same Element ----> ++count	
(B) Diff Element ----> --count

return major



CODE:




class Solution {
    public int majorityElement(int[] nums) 
    {
        // Theory: https://www.cs.utexas.edu/~moore/best-ideas/mjrty/
        // Bayer-Moore Algo
        // T - O(N), S- O(1)

        // IP: [3 2 3]
		// OP: 3
    
        int major = nums[0], count = 1;  // major : 3
        int i=1;
        int n = nums.length; // n = 3
        
        for (i=1; i<n; i++) // i =1, i = 2
        {
            // New Element -> Increase frequency from 0 -> 1
            if (count == 0)
            {
                ++count; // count = 1
                major = nums[i]; // major = nums[2] = 3
            }
            
            // Same Element -> Increase Frequency By 1
            else if (nums[i] == major) // nums[1] =2, major = 3
                ++count;
            
            // Different Element -> Decrease Frequency By 1
            else
                --count; // count = 0
        }
        
        return major; // 3 - ANS
    }
}


TC: O(N)
SC: O(1)





Algos:

(1) Bayer Moore
(2) Pigeonhole
(3) Morris Traversal
(4) Bit Manipulation
(5) Randomisation 
(6) Divide and Conquer


























HW:

[Google] Find if there is any subarray with sum = K
https://leetcode.com/problems/subarray-sum-equals-k/
















































